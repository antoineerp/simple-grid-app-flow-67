
name: Unified Deployment to Infomaniak

on:
  push:
    branches: [ main ]
  workflow_dispatch:

jobs:
  build_and_deploy:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '18'
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Build project
      run: npm run build
      
    - name: Display build output
      run: |
        echo "=== Build Output ==="
        ls -la dist/
        echo "=== Assets ==="
        ls -la dist/assets/
    
    - name: Prepare deployment directory
      run: |
        echo "=== Préparation du déploiement ==="
        # Création des dossiers nécessaires
        mkdir -p deploy/assets
        mkdir -p deploy/api/config
        mkdir -p deploy/api/controllers
        mkdir -p deploy/api/models
        mkdir -p deploy/api/middleware
        mkdir -p deploy/api/operations
        mkdir -p deploy/api/utils
        mkdir -p deploy/api/documentation
        mkdir -p deploy/public/lovable-uploads
        mkdir -p deploy/public/error-pages
        
        # Copie des fichiers principaux de l'application
        cp index.php deploy/ || echo "index.php non trouvé"
        
        # Utiliser index.html de dist en priorité
        if [ -f "dist/index.html" ]; then
          cp dist/index.html deploy/
          echo "✅ index.html copié depuis dist/"
        else
          cp index.html deploy/ || echo "index.html non trouvé"
        fi
        
        cp .htaccess deploy/ || echo ".htaccess non trouvé"
        cp .user.ini deploy/ || echo ".user.ini non trouvé"
        cp error-handler.php deploy/ || echo "error-handler.php non trouvé"
        cp fix-css-deployment.php deploy/ || echo "fix-css-deployment.php non trouvé"
        
        # Copier les fichiers du dossier dist s'il existe
        if [ -d "dist" ]; then
          echo "Copie des fichiers du dossier dist..."
          # Copier tous les autres fichiers (sauf index.html déjà copié)
          find dist -maxdepth 1 -type f -not -name "index.html" -exec cp {} deploy/ \;
        fi
        
        # Copie des assets (priorité au dossier dist/assets)
        if [ -d "dist/assets" ]; then
          echo "Copie des assets depuis dist/assets/"
          cp -r dist/assets/* deploy/assets/
          # Assurer que main.css est présent
          if [ ! -f "deploy/assets/main.css" ] && [ -f "assets/main.css" ]; then
            echo "Copie de main.css depuis assets/"
            cp assets/main.css deploy/assets/
          fi
        elif [ -d "assets" ]; then
          echo "Copie des assets depuis assets/"
          cp -r assets/* deploy/assets/
        else
          echo "ERREUR: Aucun dossier assets trouvé!"
        fi
        
        # Créer un main.css de secours si nécessaire
        if [ ! -f "deploy/assets/main.css" ]; then
          echo "Création d'un fichier main.css de secours..."
          echo "/* Fichier CSS de secours créé automatiquement */" > deploy/assets/main.css
          echo "body { font-family: system-ui, -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif; color: #333; background-color: #f9fafb; margin: 0; padding: 0; }" >> deploy/assets/main.css
          echo "#root { max-width: 1280px; margin: 0 auto; padding: 2rem; }" >> deploy/assets/main.css
        fi
        
        # Vérifier que les CSS nécessaires sont présents
        echo "=== Vérification des CSS ==="
        ls -la deploy/assets/*.css || echo "Pas de fichiers CSS trouvés dans deploy/assets/"
        
        # Configuration de l'API
        echo "Configuration de l'API..."
        
        # Création du fichier .htaccess pour l'API
        cat > deploy/api/.htaccess <<'EOL'
# Activer la réécriture d'URL
RewriteEngine On

# Définir les types MIME corrects
AddType application/javascript .js
AddType application/javascript .mjs
AddType application/javascript .es.js
AddType text/css .css
AddType application/json .json

# Gérer les requêtes OPTIONS pour CORS
RewriteCond %{REQUEST_METHOD} OPTIONS
RewriteRule ^(.*)$ $1 [R=200,L]

# Configuration CORS et types MIME
<IfModule mod_headers.c>
    # Force le bon type MIME pour les JavaScript modules
    <FilesMatch "\.(m?js|es\.js)$">
        Header set Content-Type "application/javascript"
        Header set X-Content-Type-Options "nosniff"
    </FilesMatch>
    
    Header set Access-Control-Allow-Origin "*"
    Header set Access-Control-Allow-Methods "GET, POST, OPTIONS, PUT, DELETE"
    Header set Access-Control-Allow-Headers "Content-Type, Authorization, X-Requested-With"
    
    # Eviter la mise en cache
    Header set Cache-Control "no-cache, no-store, must-revalidate"
    Header set Pragma "no-cache"
    Header set Expires 0
</IfModule>

# Permettre l'accès direct aux fichiers PHP spécifiques
RewriteCond %{REQUEST_FILENAME} -f
RewriteRule \.(php)$ - [L]

# Rediriger toutes les requêtes vers l'index.php sauf pour les fichiers existants
RewriteCond %{REQUEST_FILENAME} !-f
RewriteCond %{REQUEST_FILENAME} !-d
RewriteRule ^(.*)$ index.php [QSA,L]
EOL
        
        # Création du fichier de configuration DB
        cat > deploy/api/config/db_config.json <<'EOL'
{
    "host": "p71x6d.myd.infomaniak.com",
    "db_name": "p71x6d_richard",
    "username": "p71x6d_richard",
    "password": "Trottinette43!"
}
EOL
        
        # Création du fichier env.php
        echo "<?php
// Configuration des variables d'environnement pour Infomaniak
define(\"DB_HOST\", \"p71x6d.myd.infomaniak.com\");
define(\"DB_NAME\", \"p71x6d_richard\");
define(\"DB_USER\", \"p71x6d_richard\");
define(\"DB_PASS\", \"Trottinette43!\");
define(\"API_BASE_URL\", \"/api\");
define(\"APP_ENV\", \"production\");

// Fonction d'aide pour récupérer les variables d'environnement
function get_env(\$key, \$default = null) {
    \$const_name = strtoupper(\$key);
    if (defined(\$const_name)) {
        return constant(\$const_name);
    }
    return \$default;
}
?>" > deploy/api/config/env.php
        
        # Copie des fichiers PHP de l'API
        if [ -d "api" ]; then
          find api -name "*.php" | while read file; do
            # Créer le dossier de destination si nécessaire
            dir_name=$(dirname "$file")
            target_dir="deploy/$dir_name"
            mkdir -p "$target_dir"
            
            # Copier le fichier
            cp "$file" "deploy/$file"
          done
          echo "✅ Fichiers PHP de l'API copiés"
        else
          echo "ERREUR: Dossier API non trouvé!"
        fi
        
        # Copie des uploads
        if [ -d "public/lovable-uploads" ]; then
          cp -r public/lovable-uploads/* deploy/public/lovable-uploads/
          echo "✅ Uploads copiés"
        fi
        
        # Créer un fichier README dans le dossier documentation
        cat > deploy/api/documentation/README.md <<'EOL'
# Documentation API

Ce dossier contient la documentation de l'API.
EOL
        
        # Vérification des fichiers critiques
        echo "=== Vérification des fichiers critiques ==="
        critical_files=(
          "deploy/api/.htaccess"
          "deploy/api/config/db_config.json"
          "deploy/api/config/env.php"
          "deploy/index.php"
          "deploy/index.html"
          "deploy/.htaccess"
          "deploy/assets/main.css"
        )
        
        all_ok=true
        for file in "${critical_files[@]}"; do
          if [ -f "$file" ]; then
            echo "✅ $file: PRÉSENT"
          else
            echo "❌ $file: MANQUANT"
            all_ok=false
          fi
        done
        
        # Appliquer les permissions
        find deploy -type d -exec chmod 755 {} \;
        find deploy -type f -exec chmod 644 {} \;
        echo "✅ Permissions appliquées"
        
        if [ "$all_ok" = true ]; then
          echo "=== DÉPLOIEMENT PRÊT ==="
        else
          echo "=== ATTENTION: FICHIERS MANQUANTS ==="
          exit 1
        fi
    
    - name: Deploy via FTP
      uses: SamKirkland/FTP-Deploy-Action@4.3.3
      with:
        server: ${{ secrets.FTP_SERVER }}
        username: ${{ secrets.FTP_USERNAME }}
        password: ${{ secrets.FTP_PASSWORD }}
        local-dir: ./deploy/
        server-dir: ./
        dangerous-clean-slate: false
