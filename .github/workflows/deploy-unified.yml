
name: Déploiement Unifié vers Infomaniak

on:
  push:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      reason:
        description: 'Raison du déploiement manuel'
        required: false
        default: 'Déploiement manuel'

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout du code source
      uses: actions/checkout@v3
      with:
        token: ${{ secrets.GITHUB_TOKEN }}

    - name: Configuration de Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '20'
        
    - name: Installation des dépendances
      run: npm install --legacy-peer-deps
      
    - name: Construction de l'application React
      run: npm run build
      
    - name: Préparation du déploiement
      run: |
        echo "=== Déploiement Simplifié vers Infomaniak ==="
        echo "Date: $(date)"
        
        # Création du dossier de déploiement
        mkdir -p deploy
        
        # Copie DIRECTE du dossier dist complet
        cp -r dist deploy/
        echo "✅ Dossier dist/ copié entièrement"
        
        # Création des dossiers essentiels AVANT le déploiement FTP
        mkdir -p deploy/assets
        mkdir -p deploy/api/config
        mkdir -p deploy/api/utils
        mkdir -p deploy/api-tools
        mkdir -p deploy/public/lovable-uploads
        
        # S'assurer que les dossiers sont correctement créés
        echo "Vérification des dossiers créés:"
        ls -la deploy/
        ls -la deploy/api/
        ls -la deploy/api-tools/
        
        # Créer le fichier .gitkeep dans api-tools pour préserver le dossier
        touch deploy/api-tools/.gitkeep
        
        # Créer index.php dans api-tools
        echo "<?php
// Redirection vers la vérification des routes
header('Location: check-routes.php');
exit;
?>" > deploy/api-tools/index.php
        
        # Créer check-routes.php
        echo "<?php
header('Content-Type: text/html; charset=utf-8');
echo \"<h1>Vérification des Routes</h1>\";
echo \"<p>Cet outil permet de vérifier les routes définies dans l'application.</p>\";
?>" > deploy/api-tools/check-routes.php
        
        # Copier les fichiers racine essentiels
        cp index.php deploy/ 2>/dev/null || echo "index.php copié depuis dist/"
        cp index.html deploy/ 2>/dev/null || cp dist/index.html deploy/ || echo "ERREUR: index.html non trouvé"
        cp .htaccess deploy/ 2>/dev/null || echo "Attention: .htaccess non trouvé"
        cp vite.config.ts deploy/ 2>/dev/null || echo "Attention: vite.config.ts non trouvé"
        
        # Copier les assets vers le dossier assets (sauvegarde)
        if [ -d "assets" ]; then
          cp -r assets/* deploy/assets/ 2>/dev/null || echo "Aucun asset à copier depuis assets/"
        fi
        
        # Copier les assets du build également
        if [ -d "dist/assets" ]; then
          cp -r dist/assets/* deploy/assets/ 2>/dev/null || echo "Aucun asset à copier depuis dist/assets/"
        fi
        
        # Configuration de la base de données
        echo '{
            "host": "p71x6d.myd.infomaniak.com",
            "db_name": "p71x6d_richard",
            "username": "p71x6d_richard",
            "password": "Trottinette43!"
        }' > deploy/api/config/db_config.json
        
        # Configuration PHP
        echo "<?php
// Configuration des variables d'environnement pour Infomaniak
define(\"DB_HOST\", \"p71x6d.myd.infomaniak.com\");
define(\"DB_NAME\", \"p71x6d_richard\");
define(\"DB_USER\", \"p71x6d_richard\");
define(\"DB_PASS\", \"Trottinette43!\");
define(\"API_BASE_URL\", \"/api\");
define(\"APP_ENV\", \"production\");

// Fonction d'aide pour récupérer les variables d'environnement
function get_env(\$key, \$default = null) {
    \$const_name = strtoupper(\$key);
    if (defined(\$const_name)) {
        return constant(\$const_name);
    }
    return \$default;
}
?>" > deploy/api/config/env.php
        
        # Créer .htaccess pour l'API
        echo "# Activer la réécriture d'URL
RewriteEngine On

# Configuration CORS
Header set Access-Control-Allow-Origin \"*\"
Header set Access-Control-Allow-Methods \"GET, POST, OPTIONS, PUT, DELETE\"
Header set Access-Control-Allow-Headers \"Content-Type, Authorization, X-Requested-With\"

# Rediriger toutes les requêtes vers index.php
RewriteCond %{REQUEST_FILENAME} !-f
RewriteCond %{REQUEST_FILENAME} !-d
RewriteRule ^(.*)$ index.php [QSA,L]" > deploy/api/.htaccess
        
        # Vérifier les dossiers et fichiers critiques
        echo ""
        echo "=== Vérification des fichiers critiques ==="
        critical_files=(
          "deploy/dist/index.html"
          "deploy/assets"
          "deploy/api-tools/.gitkeep"
          "deploy/api-tools/index.php"
          "deploy/api-tools/check-routes.php"
          "deploy/api/config/db_config.json"
          "deploy/api/config/env.php"
          "deploy/api/.htaccess"
        )
        
        all_ok=true
        for file in "${critical_files[@]}"; do
          if [ -e "$file" ]; then
            echo "✅ $file: PRÉSENT"
          else
            echo "❌ $file: MANQUANT"
            all_ok=false
          fi
        done
        
        if [ "$all_ok" = true ]; then
          echo "Tous les fichiers critiques sont présents!"
        else
          echo "ATTENTION: Certains fichiers critiques sont manquants!"
        fi
        
        # Liste la structure du dossier de déploiement
        echo ""
        echo "=== Structure du déploiement ==="
        find deploy -type d | sort

    - name: Synchronisation vers le serveur Infomaniak
      uses: SamKirkland/FTP-Deploy-Action@v4.3.4
      with:
        server: ${{ secrets.FTP_SERVER }}
        username: ${{ secrets.FTP_USERNAME }}
        password: ${{ secrets.FTP_PASSWORD }}
        local-dir: ./deploy/
        server-dir: /sites/qualiopi.ch/
        dangerous-clean-slate: false
        exclude: |
          **/.git*
          **/.git*/**
          **/node_modules/**
          README.md
        log-level: verbose
        timeout: 120000

    - name: Nettoyage
      run: rm -rf deploy
