name: Deploy to Infomaniak

on:
  push:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      reason:
        description: 'Reason for manual deployment'
        required: false
        default: 'Manual deployment'

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v3
      with:
        fetch-depth: 0

    - name: Setup Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '20'
        
    - name: Install Dependencies
      run: npm install --legacy-peer-deps
      
    - name: Build React App
      run: npm run build
      env:
        NODE_ENV: production
        VITE_HOSTING: 'infomaniak'
      
    - name: Create deployment directory structure
      run: |
        mkdir -p deploy/assets
        mkdir -p deploy/api
        mkdir -p deploy/public/lovable-uploads
        
        # Copy the index.html file
        cp dist/index.html deploy/
        
        # Copy all asset files directly to the assets folder
        cp -r dist/assets/* deploy/assets/
        
        # Create assets at the root level (important for Infomaniak)
        mkdir -p deploy/assets
        cp -r dist/assets/* deploy/assets/
        
        # Copy PHP bridge file
        echo "<?php /* PHP bridge file */ ?>" > deploy/assets/index.php
        
        # Copy htaccess files - IMPORTANT FOR PHP EXECUTION
        cp .htaccess deploy/ || echo "Root .htaccess not found"
        cp api/.htaccess deploy/api/ || echo "API .htaccess not found"
        
        # Copy user.ini files for PHP configuration
        cp .user.ini deploy/ || echo "Root .user.ini not found"
        cp api/.user.ini deploy/api/ || echo "API .user.ini not found"
        
        # Copy php.ini files for extra PHP configuration
        cp api/php.ini deploy/api/ || echo "API php.ini not found"
        
        # Copy all PHP files from root
        find . -maxdepth 1 -name "*.php" -exec cp {} deploy/ \;
        
        # Copy API folder recursively (excluding unnecessary files)
        find api -type f \( -name "*.php" -o -name "*.json" -o -name "*.ini" -o -name "*.htaccess" \) | while read file; do
          mkdir -p "deploy/$(dirname "$file")"
          cp "$file" "deploy/$file"
        done
        
        # Make a special diagnostic file in API root
        echo '<?php phpinfo(); ?>' > deploy/api/phpinfo.php
        
        # Copy uploads if they exist
        if [ -d "public/lovable-uploads" ]; then
          cp -r public/lovable-uploads/* deploy/public/lovable-uploads/ || echo "No uploads to copy"
        fi
        
        # Create compatibility script for assets
        echo "/* Assets bridge for Infomaniak compatibility */
        import './main.js';" > deploy/assets/index.js
        
        # Ensure correct permissions
        chmod -R 755 deploy/
        find deploy/ -type f -name "*.php" -exec chmod 644 {} \;

    - name: Debug deployment files
      run: |
        echo "=== DEPLOYMENT FILES STRUCTURE ==="
        find deploy -type f | sort | head -n 30
        echo "..."
        
        echo "=== PHP FILE COUNT ==="
        find deploy -name "*.php" | wc -l
        
        echo "=== ASSETS FILE COUNT ==="
        find deploy/assets -type f | wc -l
        
        echo "=== CRITICAL FILES CHECK ==="
        ls -la deploy/index.html && echo "✓ index.html" || echo "✗ index.html MISSING"
        ls -la deploy/.htaccess && echo "✓ .htaccess" || echo "✗ .htaccess MISSING"
        ls -la deploy/api/.htaccess && echo "✓ api/.htaccess" || echo "✗ api/.htaccess MISSING"
        ls -la deploy/api/test.php && echo "✓ api/test.php" || echo "✗ api/test.php MISSING"

    - name: Upload to Infomaniak
      uses: SamKirkland/FTP-Deploy-Action@v4.3.4
      with:
        server: ${{ secrets.FTP_SERVER }}
        username: ${{ secrets.FTP_USERNAME }}
        password: ${{ secrets.FTP_PASSWORD }}
        local-dir: ./deploy/
        server-dir: /sites/qualiopi.ch/
        dangerous-clean-slate: false
        exclude: |
          **/.git*
          **/.git*/**
          **/node_modules/**
          README.md
          package.json
          package-lock.json
        log-level: verbose
        timeout: 120000

    - name: Clean up
      if: always()
      run: rm -rf deploy dist
