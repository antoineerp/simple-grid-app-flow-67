
name: Deploy to Infomaniak

on:
  push:
    branches: [ main ]
  workflow_dispatch:

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Setup Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '20'
        
    - name: Install Dependencies
      run: npm install
      
    - name: Build React App
      run: npm run build
      
    - name: Debug build output
      run: |
        echo "============== Debugging build output =============="
        echo "Liste des fichiers dans dist:"
        ls -la dist/
        echo "Liste des fichiers assets:"
        ls -la dist/assets/ || echo "Dossier assets non trouvé"
        echo "Contenu de index.html:"
        cat dist/index.html || echo "index.html non trouvé"

    - name: Create complete directory structure
      run: |
        echo "Creating all necessary directories..."
        mkdir -p dist/api/config
        mkdir -p dist/api/controllers
        mkdir -p dist/api/middleware
        mkdir -p dist/api/models
        mkdir -p dist/api/utils
        mkdir -p dist/public/lovable-uploads
        
        # Ajout du fichier .htaccess à la racine
        cp -v .htaccess dist/ || echo "Attention: .htaccess non trouvé dans la racine"
        
        # Copier les fichiers PHP d'utilitaires
        cp -v fix-assets-runtime.php dist/ || echo "Attention: fix-assets-runtime.php non trouvé"
        cp -v fix-index-references.php dist/ || echo "Attention: fix-index-references.php non trouvé"
        cp -v utils-assets.php dist/ || echo "Attention: utils-assets.php non trouvé"
        cp -v utils-directory.php dist/ || echo "Attention: utils-directory.php non trouvé"
        cp -v index-validator.php dist/ || echo "Attention: index-validator.php non trouvé"
      
    - name: Copy API files with explicit paths
      run: |
        echo "Copying API files with detailed logging..."
        
        # Copier les fichiers principaux de l'API
        cp -v api/index.php dist/api/ || echo "Attention: index.php non trouvé"
        cp -v api/.htaccess dist/api/ || echo "Attention: .htaccess non trouvé"
        cp -v api/.user.ini dist/api/ || echo "Attention: .user.ini non trouvé"
        cp -v api/auth.php dist/api/ || echo "Attention: auth.php non trouvé"
        cp -v api/test.php dist/api/ || echo "Attention: test.php non trouvé"
        cp -v api/info.php dist/api/ || echo "Attention: info.php non trouvé"
        cp -v api/diagnostic.php dist/api/ || echo "Attention: diagnostic.php non trouvé"
        cp -v api/diagnostic-complet.php dist/api/ || echo "Attention: diagnostic-complet.php non trouvé"
        cp -v api/diagnose-assets.php dist/api/ || echo "Attention: diagnose-assets.php non trouvé"
        cp -v api/assets-check.php dist/api/ || echo "Attention: assets-check.php non trouvé"
        cp -v api/php.ini dist/api/ || echo "Attention: php.ini non trouvé"
        cp -v api/login-test.php dist/api/ || echo "Attention: login-test.php non trouvé"
        cp -v api/check-users.php dist/api/ || echo "Attention: check-users.php non trouvé"
        cp -v api/php-execution-test.php dist/api/ || echo "Attention: php-execution-test.php non trouvé"
        
        # Ajout des fichiers de gestion documentaire
        cp -v api/documents-load.php dist/api/ || echo "Attention: documents-load.php non trouvé"
        cp -v api/documents-sync.php dist/api/ || echo "Attention: documents-sync.php non trouvé"
        cp -v api/bibliotheque-load.php dist/api/ || echo "Attention: bibliotheque-load.php non trouvé"
        cp -v api/bibliotheque-sync.php dist/api/ || echo "Attention: bibliotheque-sync.php non trouvé"
        
        # Copier les fichiers de configuration
        cp -v api/config/env.php dist/api/config/ || echo "Attention: env.php non trouvé"
        cp -v api/config/env.example.php dist/api/config/ || echo "Attention: env.example.php non trouvé"
        cp -v api/config/database.php dist/api/config/ || echo "Attention: database.php non trouvé"
        
        # Copier les contrôleurs
        cp -v api/controllers/AuthController.php dist/api/controllers/ || echo "Attention: AuthController.php non trouvé"
        cp -v api/controllers/UserController.php dist/api/controllers/ || echo "Attention: UserController.php non trouvé"
        cp -v api/controllers/UsersController.php dist/api/controllers/ || echo "Attention: UsersController.php non trouvé"
        cp -v api/controllers/ConfigController.php dist/api/controllers/ || echo "Attention: ConfigController.php non trouvé"
        cp -v api/controllers/DatabaseConfigController.php dist/api/controllers/ || echo "Attention: DatabaseConfigController.php non trouvé"
        cp -v api/controllers/DatabaseTestController.php dist/api/controllers/ || echo "Attention: DatabaseTestController.php non trouvé"
        
        # Copier les middlewares
        cp -v api/middleware/Auth.php dist/api/middleware/ || echo "Attention: Auth.php middleware non trouvé"
        
        # Copier les modèles
        cp -v api/models/User.php dist/api/models/ || echo "Attention: User.php model non trouvé"
        
        # Copier les utilitaires
        cp -v api/utils/JwtHandler.php dist/api/utils/ || echo "Attention: JwtHandler.php non trouvé"
        
    # Create missing API files
    - name: Create missing bibliotheque-load.php file
      run: |
        echo "Creating missing bibliotheque-load.php file..."
        cat > dist/api/bibliotheque-load.php << 'EOF'
<?php
header("Content-Type: application/json; charset=UTF-8");
header("Access-Control-Allow-Origin: *");
header("Access-Control-Allow-Methods: GET, OPTIONS");
header("Access-Control-Allow-Headers: Content-Type, Authorization, X-Requested-With");

// Si c'est une requête OPTIONS (preflight), nous la terminons ici
if ($_SERVER['REQUEST_METHOD'] == 'OPTIONS') {
    http_response_code(200);
    echo json_encode(['status' => 200, 'message' => 'Preflight OK']);
    exit;
}

// Gérer uniquement les requêtes GET
if ($_SERVER['REQUEST_METHOD'] !== 'GET') {
    http_response_code(405);
    echo json_encode(['success' => false, 'message' => 'Méthode non autorisée']);
    exit;
}

// Récupérer l'ID utilisateur
$userId = isset($_GET['userId']) ? $_GET['userId'] : null;

if (!$userId) {
    http_response_code(400);
    echo json_encode(['success' => false, 'message' => 'ID utilisateur requis']);
    exit;
}

// Journaliser la requête
error_log("Chargement de la bibliothèque pour l'utilisateur: " . $userId);

try {
    // Inclure la configuration de la base de données
    require_once 'config/database.php';
    $database = new Database();
    $conn = $database->getConnection();

    // Vérifier si la connexion est établie
    if (!$database->is_connected) {
        throw new Exception("Erreur de connexion à la base de données: " . ($database->connection_error ?? "Erreur inconnue"));
    }

    // Nom de la table des documents pour cet utilisateur
    $tableName = "user_bibliotheque_" . preg_replace('/[^a-z0-9_]/i', '_', $userId);
    $groupsTableName = "user_bibliotheque_groups_" . preg_replace('/[^a-z0-9_]/i', '_', $userId);
    
    // Vérifier si la table existe
    $stmt = $conn->prepare("SHOW TABLES LIKE :tableName");
    $stmt->bindParam(':tableName', $tableName);
    $stmt->execute();
    
    $documents = [];
    $groups = [];
    
    // Récupérer tous les documents
    if ($stmt->rowCount() > 0) {
        $sql = "SELECT * FROM `$tableName`";
        $stmt = $conn->prepare($sql);
        $stmt->execute();
        
        while ($row = $stmt->fetch(PDO::FETCH_ASSOC)) {
            $document = [
                'id' => $row['id'],
                'name' => $row['name'],
                'link' => $row['link']
            ];
            
            // Ajouter le groupId s'il existe
            if ($row['group_id']) {
                $document['groupId'] = $row['group_id'];
            }
            
            $documents[] = $document;
        }
    }
    
    // Vérifier si la table des groupes existe
    $stmt = $conn->prepare("SHOW TABLES LIKE :groupsTableName");
    $stmt->bindParam(':groupsTableName', $groupsTableName);
    $stmt->execute();
    
    // Récupérer tous les groupes
    if ($stmt->rowCount() > 0) {
        $sql = "SELECT * FROM `$groupsTableName` ORDER BY `order`";
        $stmt = $conn->prepare($sql);
        $stmt->execute();
        
        while ($row = $stmt->fetch(PDO::FETCH_ASSOC)) {
            $group = [
                'id' => $row['id'],
                'name' => $row['name'],
                'expanded' => (bool)$row['expanded'],
                'items' => [] // Sera rempli côté client
            ];
            
            $groups[] = $group;
        }
    }

    http_response_code(200);
    echo json_encode([
        'success' => true,
        'documents' => $documents,
        'groups' => $groups,
        'count_documents' => count($documents),
        'count_groups' => count($groups)
    ]);
    
} catch (Exception $e) {
    error_log("Erreur lors du chargement de la bibliothèque: " . $e->getMessage());
    http_response_code(500);
    echo json_encode([
        'success' => false, 
        'message' => 'Erreur serveur: ' . $e->getMessage()
    ]);
}
?>
EOF
        echo "bibliotheque-load.php created successfully."
        
    - name: Create missing bibliotheque-sync.php file
      run: |
        echo "Creating missing bibliotheque-sync.php file..."
        cat > dist/api/bibliotheque-sync.php << 'EOF'
<?php
header("Content-Type: application/json; charset=UTF-8");
header("Access-Control-Allow-Origin: *");
header("Access-Control-Allow-Methods: POST, OPTIONS");
header("Access-Control-Allow-Headers: Content-Type, Authorization, X-Requested-With");

// Si c'est une requête OPTIONS (preflight), nous la terminons ici
if ($_SERVER['REQUEST_METHOD'] == 'OPTIONS') {
    http_response_code(200);
    echo json_encode(['status' => 200, 'message' => 'Preflight OK']);
    exit;
}

// Gérer uniquement les requêtes POST
if ($_SERVER['REQUEST_METHOD'] !== 'POST') {
    http_response_code(405);
    echo json_encode(['success' => false, 'message' => 'Méthode non autorisée']);
    exit;
}

// Récupérer les données envoyées
$inputJSON = file_get_contents('php://input');
$input = json_decode($inputJSON, TRUE);

// Vérifier si le décodage JSON a fonctionné
if ($input === null && json_last_error() !== JSON_ERROR_NONE) {
    http_response_code(400);
    echo json_encode(['success' => false, 'message' => 'Données JSON invalides: ' . json_last_error_msg()]);
    exit;
}

// Vérifier les paramètres requis
if (!isset($input['userId']) || !isset($input['documents']) || !isset($input['groups'])) {
    http_response_code(400);
    echo json_encode(['success' => false, 'message' => 'Paramètres manquants (userId, documents ou groups)']);
    exit;
}

// Extraire les paramètres
$userId = $input['userId'];
$documents = $input['documents'];
$groups = $input['groups'];

// Journaliser la requête
error_log("Synchronisation de la bibliothèque pour l'utilisateur: " . $userId);
error_log("Nombre de documents: " . count($documents));
error_log("Nombre de groupes: " . count($groups));

try {
    // Inclure la configuration de la base de données
    require_once 'config/database.php';
    $database = new Database();
    $conn = $database->getConnection();
    
    // Vérifier si la connexion est établie
    if (!$database->is_connected) {
        throw new Exception("Erreur de connexion à la base de données: " . ($database->connection_error ?? "Erreur inconnue"));
    }
    
    // Noms des tables pour cet utilisateur
    $tableName = "user_bibliotheque_" . preg_replace('/[^a-z0-9_]/i', '_', $userId);
    $groupsTableName = "user_bibliotheque_groups_" . preg_replace('/[^a-z0-9_]/i', '_', $userId);
    
    // Commencer une transaction
    $conn->beginTransaction();
    
    // Créer ou recréer la table des documents
    $sql = "DROP TABLE IF EXISTS `$tableName`";
    $conn->exec($sql);
    
    $sql = "CREATE TABLE `$tableName` (
        `id` VARCHAR(100) NOT NULL,
        `name` VARCHAR(255) NOT NULL,
        `link` TEXT,
        `group_id` VARCHAR(100),
        `order` INT DEFAULT 0,
        PRIMARY KEY (`id`)
    ) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci";
    $conn->exec($sql);
    
    // Créer ou recréer la table des groupes
    $sql = "DROP TABLE IF EXISTS `$groupsTableName`";
    $conn->exec($sql);
    
    $sql = "CREATE TABLE `$groupsTableName` (
        `id` VARCHAR(100) NOT NULL,
        `name` VARCHAR(255) NOT NULL,
        `expanded` TINYINT(1) DEFAULT 0,
        `order` INT DEFAULT 0,
        PRIMARY KEY (`id`)
    ) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci";
    $conn->exec($sql);
    
    // Insérer les documents
    $insertDocSql = "INSERT INTO `$tableName` (id, name, link, group_id, `order`) VALUES (:id, :name, :link, :groupId, :order)";
    $docStmt = $conn->prepare($insertDocSql);
    
    $order = 0;
    foreach ($documents as $document) {
        $docStmt->bindParam(':id', $document['id']);
        $docStmt->bindParam(':name', $document['name']);
        $docStmt->bindParam(':link', $document['link']);
        
        // GroupId pourrait être null
        if (isset($document['groupId']) && $document['groupId']) {
            $docStmt->bindParam(':groupId', $document['groupId']);
        } else {
            $nullValue = null;
            $docStmt->bindParam(':groupId', $nullValue, PDO::PARAM_NULL);
        }
        
        $docStmt->bindParam(':order', $order);
        $order++;
        $docStmt->execute();
    }
    
    // Insérer les groupes
    $insertGroupSql = "INSERT INTO `$groupsTableName` (id, name, expanded, `order`) VALUES (:id, :name, :expanded, :order)";
    $groupStmt = $conn->prepare($insertGroupSql);
    
    $order = 0;
    foreach ($groups as $group) {
        $expanded = isset($group['expanded']) && $group['expanded'] ? 1 : 0;
        
        $groupStmt->bindParam(':id', $group['id']);
        $groupStmt->bindParam(':name', $group['name']);
        $groupStmt->bindParam(':expanded', $expanded);
        $groupStmt->bindParam(':order', $order);
        $order++;
        $groupStmt->execute();
        
        // Si le groupe a des éléments, les ajouter à la table des documents
        if (isset($group['items']) && is_array($group['items'])) {
            $subOrder = 0;
            foreach ($group['items'] as $item) {
                $docStmt->bindParam(':id', $item['id']);
                $docStmt->bindParam(':name', $item['name']);
                $docStmt->bindParam(':link', $item['link']);
                $docStmt->bindParam(':groupId', $group['id']);
                $docStmt->bindParam(':order', $subOrder);
                $subOrder++;
                $docStmt->execute();
            }
        }
    }
    
    // Valider la transaction
    $conn->commit();
    
    http_response_code(200);
    echo json_encode([
        'success' => true,
        'message' => 'Bibliothèque synchronisée avec succès',
        'documents_count' => count($documents),
        'groups_count' => count($groups)
    ]);
    
} catch (Exception $e) {
    // En cas d'erreur, annuler la transaction
    if (isset($conn)) {
        $conn->rollBack();
    }
    
    error_log("Erreur lors de la synchronisation de la bibliothèque: " . $e->getMessage());
    http_response_code(500);
    echo json_encode([
        'success' => false,
        'message' => 'Erreur serveur: ' . $e->getMessage()
    ]);
}
?>
EOF
        echo "bibliotheque-sync.php created successfully."

    - name: Copy remaining application files
      run: |
        # Copier les fichiers principaux
        cp -v deploy-on-infomaniak.php dist/ || echo "Attention: deploy-on-infomaniak.php non trouvé"
        cp -v verify-deploy.php dist/ || echo "Attention: verify-deploy.php non trouvé"
        cp -v deploy-check.php dist/ || echo "Attention: deploy-check.php non trouvé"
        
        # Copier les fichiers uploads avec récursion
        cp -r public/lovable-uploads/* dist/public/lovable-uploads/ || echo "Aucun fichier d'upload trouvé"
        
        # Vérifier si le dossier public contient d'autres fichiers importants
        find public -type f -not -path "*/lovable-uploads/*" -exec cp -v {} dist/public/ \; || echo "Pas d'autres fichiers publics trouvés"

    - name: Run post-build script to fix index references
      run: |
        echo "Running post-build script to ensure index.html is correct..."
        cd dist
        # Créer un script temporaire pour vérifier les assets
        cat > check-assets.php << 'EOF'
        <?php
        $assets_js = glob('./assets/*.js');
        $assets_css = glob('./assets/*.css');
        echo "Found JS assets: " . implode(", ", $assets_js) . "\n";
        echo "Found CSS assets: " . implode(", ", $assets_css) . "\n";
        
        // Vérifier index.html
        $index_content = file_get_contents('./index.html');
        echo "Index.html content:\n";
        echo substr($index_content, 0, 1000) . "...\n";
        ?>
        EOF
        
        php check-assets.php
        cd ..

    - name: Check structure before deployment
      run: |
        echo "Verifying structure before deployment:"
        echo "Root files:"
        ls -la dist/
        echo "API files:"
        ls -la dist/api/
        echo "API config files:"
        ls -la dist/api/config/
        echo "Public files:"
        ls -la dist/public/ || echo "No public folder"
        
    - name: Sync full dist folder to Infomaniak server
      uses: SamKirkland/FTP-Deploy-Action@v4.3.4
      with:
        server: ${{ secrets.FTP_SERVER }}
        username: ${{ secrets.FTP_USERNAME }}
        password: ${{ secrets.FTP_PASSWORD }}
        local-dir: ./dist/
        server-dir: /
        dangerous-clean-slate: false
        exclude: |
          **/.git*
          **/.git*/**
          **/node_modules/**
          README.md
          package.json
          package-lock.json
          tsconfig*.json
          *.log
        log-level: verbose
        timeout: 120000
        dry-run: false
    
    - name: Post-deployment verification
      run: |
        echo "Déploiement terminé. Vérifiez les logs pour toute erreur."
        echo "Exécutez fix-assets-runtime.php sur votre serveur pour vérifier l'état du déploiement."
        echo "URL: https://qualiopi.ch/fix-assets-runtime.php"
        echo "Vérifiez également: https://qualiopi.ch/fix-index-references.php"
