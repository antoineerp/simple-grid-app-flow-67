
name: Deploy to Infomaniak

on:
  push:
    branches: [ main ]
  workflow_dispatch:

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Setup Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '20'
        
    - name: Install Dependencies
      run: npm install --legacy-peer-deps
      
    - name: Build React App
      run: npm run build
      
    - name: Debug build output
      run: |
        echo "============== Debugging build output =============="
        echo "Liste des fichiers dans dist:"
        ls -la dist/
        echo "Liste des fichiers assets:"
        ls -la dist/assets/ || echo "Dossier assets non trouvé"
        echo "Contenu de index.html:"
        cat dist/index.html || echo "Fichier index.html non trouvé"

    - name: Prepare deployment directory
      run: |
        # Création des dossiers nécessaires
        mkdir -p deploy/assets
        mkdir -p deploy/api/config
        mkdir -p deploy/api/services
        mkdir -p deploy/api/controllers
        mkdir -p deploy/api/models
        mkdir -p deploy/api/models/traits
        mkdir -p deploy/api/middleware
        mkdir -p deploy/api/operations
        mkdir -p deploy/api/utils
        mkdir -p deploy/public/lovable-uploads
        
        # Copie du contenu du dossier dist à la racine du déploiement
        echo "Copie de index.html à la racine..."
        cp dist/index.html deploy/
        
        # Copie des assets
        echo "Copie des assets..."
        if [ -d "dist/assets" ]; then
          cp -rv dist/assets/* deploy/assets/
        else
          echo "ERREUR: Le dossier dist/assets n'existe pas!"
        fi
        
        # IMPORTANT: Copie directe des fichiers JavaScript essentiels
        echo "Copie des fichiers critiques à partir des sources..."
        
        # Copier les fichiers de secours
        echo "Création de fichiers JavaScript essentiels..."
        cp assets/main.js deploy/assets/main.js || echo "Avertissement: assets/main.js non trouvé"
        cp assets/index.js deploy/assets/index.js || echo "Avertissement: assets/index.js non trouvé"
        cp src/main.js deploy/assets/src-main.js || echo "Avertissement: src/main.js non trouvé"
        
        # S'assurer que les fichiers .htaccess existent
        cp assets/.htaccess deploy/assets/ || echo "Avertissement: assets/.htaccess non trouvé"
        cp .htaccess deploy/ || echo "Fichier .htaccess non trouvé"
        
        # Créer des fichiers .htaccess essentiels s'ils n'existent pas
        if [ ! -f "deploy/assets/.htaccess" ]; then
          echo "Création d'un fichier .htaccess pour assets..."
          echo "AddType application/javascript .js" > deploy/assets/.htaccess
          echo "AddType application/javascript .mjs" >> deploy/assets/.htaccess
          echo "AddType text/css .css" >> deploy/assets/.htaccess
          echo "<Files *.js>" >> deploy/assets/.htaccess
          echo "  ForceType application/javascript" >> deploy/assets/.htaccess
          echo "</Files>" >> deploy/assets/.htaccess
        fi
        
        # Copier le script de correction des types MIME
        cp fix-mime-types-auto.php deploy/ || echo "Création d'un script minimal pour les types MIME..."
        if [ ! -f "deploy/fix-mime-types-auto.php" ]; then
          cat > deploy/fix-mime-types-auto.php << 'EOL'
<?php
header('Content-Type: application/json');
$htaccess = "AddType application/javascript .js\nAddType application/javascript .mjs\n";
file_put_contents('./assets/.htaccess', $htaccess);
echo json_encode(['success' => true, 'message' => 'MIME types fixed']);
?>
EOL
        fi

    - name: Sync to Infomaniak server
      uses: SamKirkland/FTP-Deploy-Action@v4.3.4
      with:
        server: ${{ secrets.FTP_SERVER }}
        username: ${{ secrets.FTP_USERNAME }}
        password: ${{ secrets.FTP_PASSWORD }}
        local-dir: ./deploy/
        server-dir: /sites/qualiopi.ch/
        dangerous-clean-slate: false
        exclude: |
          **/.git*
          **/.git*/**
          **/node_modules/**
          **/api-tools/**
          **/api/admin/**
          **/api/documentation/**
          README.md
          package.json
          package-lock.json
        log-level: verbose
        timeout: 120000
    
    - name: Run Fix-MIME Script
      run: |
        echo "Exécution du script de réparation des types MIME via curl..."
        curl -s "${{ secrets.SITE_URL }}/fix-mime-types-auto.php" || echo "Échec de l'exécution du script de réparation"
        echo "Script de réparation terminé"

    - name: Clean up
      run: |
        rm -rf deploy
        rm -rf dist
