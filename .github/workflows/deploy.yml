
name: Deploy to Infomaniak

on:
  push:
    branches: [ main ]
  workflow_dispatch:

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Setup Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '20'
        
    - name: Install Dependencies
      run: npm install
      
    - name: Build React App
      run: npm run build
      
    - name: Create complete directory structure
      run: |
        echo "Creating all necessary directories..."
        mkdir -p dist/api/config
        mkdir -p dist/api/controllers
        mkdir -p dist/api/middleware
        mkdir -p dist/api/models
        mkdir -p dist/api/utils
        mkdir -p dist/public/lovable-uploads
      
    - name: Copy API files with explicit paths
      run: |
        echo "Copying API files with detailed logging..."
        
        # Copier les fichiers principaux de l'API
        cp -v api/index.php dist/api/ || echo "Attention: index.php non trouvé"
        cp -v api/.htaccess dist/api/ || echo "Attention: .htaccess non trouvé"
        cp -v api/.user.ini dist/api/ || echo "Attention: .user.ini non trouvé"
        cp -v api/auth.php dist/api/ || echo "Attention: auth.php non trouvé"
        cp -v api/test.php dist/api/ || echo "Attention: test.php non trouvé"
        cp -v api/info.php dist/api/ || echo "Attention: info.php non trouvé"
        cp -v api/diagnostic.php dist/api/ || echo "Attention: diagnostic.php non trouvé"
        cp -v api/diagnostic-complet.php dist/api/ || echo "Attention: diagnostic-complet.php non trouvé"
        cp -v api/diagnose-assets.php dist/api/ || echo "Attention: diagnose-assets.php non trouvé"
        cp -v api/assets-check.php dist/api/ || echo "Attention: assets-check.php non trouvé"
        cp -v api/php.ini dist/api/ || echo "Attention: php.ini non trouvé"
        
        # Copier les fichiers de configuration
        cp -v api/config/env.php dist/api/config/ || echo "Attention: env.php non trouvé"
        cp -v api/config/env.example.php dist/api/config/ || echo "Attention: env.example.php non trouvé"
        cp -v api/config/database.php dist/api/config/ || echo "Attention: database.php non trouvé"
        
        # Copier les contrôleurs
        cp -v api/controllers/AuthController.php dist/api/controllers/ || echo "Attention: AuthController.php non trouvé"
        cp -v api/controllers/UserController.php dist/api/controllers/ || echo "Attention: UserController.php non trouvé"
        cp -v api/controllers/ConfigController.php dist/api/controllers/ || echo "Attention: ConfigController.php non trouvé"
        cp -v api/controllers/DatabaseConfigController.php dist/api/controllers/ || echo "Attention: DatabaseConfigController.php non trouvé"
        cp -v api/controllers/DatabaseTestController.php dist/api/controllers/ || echo "Attention: DatabaseTestController.php non trouvé"
        
        # Copier les middlewares
        cp -v api/middleware/Auth.php dist/api/middleware/ || echo "Attention: Auth.php middleware non trouvé"
        
        # Copier les modèles
        cp -v api/models/User.php dist/api/models/ || echo "Attention: User.php model non trouvé"
        
        # Copier les utilitaires
        cp -v api/utils/JwtHandler.php dist/api/utils/ || echo "Attention: JwtHandler.php non trouvé"
        
    - name: Copy remaining application files
      run: |
        # Copier les fichiers principaux
        cp -v .htaccess dist/ || echo "Attention: .htaccess non trouvé"
        cp -v verify-deploy.php dist/ || echo "Attention: verify-deploy.php non trouvé"
        cp -v deploy-check.php dist/ || echo "Attention: deploy-check.php non trouvé"
        cp -v deploy-on-infomaniak.php dist/ || echo "Attention: deploy-on-infomaniak.php non trouvé"
        
        # Copier les fichiers uploads avec récursion
        cp -r public/lovable-uploads/* dist/public/lovable-uploads/ || echo "Aucun fichier d'upload trouvé"
        
        # Vérifier si le dossier public contient d'autres fichiers importants
        find public -type f -not -path "*/lovable-uploads/*" -exec cp -v {} dist/public/ \; || echo "Pas d'autres fichiers publics trouvés"
        
    - name: Verify build structure in detail
      run: |
        echo "Vérification détaillée de la structure du build..."
        echo "Liste complète des fichiers déployés:"
        find dist -type f | sort
        
        echo "Vérification des dossiers API:"
        ls -la dist/api/ || echo "Dossier API manquant!"
        
        echo "Vérification des sous-dossiers API:"
        for dir in config controllers middleware models utils; do
          echo "Contenu de dist/api/$dir:"
          ls -la dist/api/$dir || echo "Dossier $dir manquant!"
        done
        
        echo "Vérification des fichiers uploads:"
        ls -la dist/public/lovable-uploads/ || echo "Dossier uploads manquant!"
        
    - name: Create Infomaniak specific directory marker
      run: |
        # Créer un fichier pour marquer l'environnement Infomaniak
        echo "Deployed to Infomaniak at $(date)" > dist/infomaniak-environment.txt
        
    - name: Prepare server directory structure
      uses: SamKirkland/FTP-Deploy-Action@v4.3.4
      with:
        server: ${{ secrets.FTP_SERVER }}
        username: ${{ secrets.FTP_USERNAME }}
        password: ${{ secrets.FTP_PASSWORD }}
        local-dir: ./dist/
        server-dir: /sites/qualiopi.ch/
        dangerous-clean-slate: false
        exclude: |
          **/*
        log-level: verbose
        timeout: 60000
        dry-run: false
        empty-directory-structure: true
        
    - name: Deploy to Infomaniak
      uses: SamKirkland/FTP-Deploy-Action@v4.3.4
      with:
        server: ${{ secrets.FTP_SERVER }}
        username: ${{ secrets.FTP_USERNAME }}
        password: ${{ secrets.FTP_PASSWORD }}
        local-dir: ./dist/
        server-dir: /sites/qualiopi.ch/
        dangerous-clean-slate: false
        exclude: |
          **/.git*
          **/.git*/**
          **/node_modules/**
          README.md
          package.json
          package-lock.json
          tsconfig*.json
          src/**
          .github/**
          *.log
        log-level: verbose
        timeout: 120000
        
    - name: Post-deployment verification
      run: |
        echo "Déploiement terminé. Vérifiez les logs pour toute erreur."
        echo "Exécutez verify-deploy.php sur votre serveur pour vérifier l'état du déploiement."
        echo "URL: https://qualiopi.ch/verify-deploy.php"
