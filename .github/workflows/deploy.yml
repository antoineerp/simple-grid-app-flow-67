
name: Deploy to Infomaniak

on:
  push:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      reason:
        description: 'Reason for manual deployment'
        required: false
        default: 'Manual deployment'

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Setup Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '20'
        
    - name: Install Dependencies
      run: npm install --legacy-peer-deps
      
    - name: Build React App
      run: npm run build
      
    - name: Debug build output
      run: |
        echo "============== Debugging build output =============="
        echo "Liste des fichiers dans dist:"
        ls -la dist/
        echo "Liste des fichiers assets:"
        ls -la dist/assets/ || echo "Dossier assets non trouvé"
        
    - name: Prepare deployment directory
      run: |
        # Création des dossiers nécessaires
        mkdir -p deploy/assets
        mkdir -p deploy/api
        mkdir -p deploy/api/config
        mkdir -p deploy/api/services
        mkdir -p deploy/api/controllers
        mkdir -p deploy/api/models
        mkdir -p deploy/api/models/traits
        mkdir -p deploy/api/middleware
        mkdir -p deploy/api/operations
        mkdir -p deploy/api/utils
        mkdir -p deploy/public/lovable-uploads
        mkdir -p deploy/.github/workflows

        # Copie des fichiers compilés directement dans assets
        cp -r dist/assets/* deploy/assets/
        
        # Copie des autres fichiers nécessaires
        cp dist/index.html deploy/
        cp .htaccess deploy/ || echo "Fichier .htaccess non trouvé"
        
        # Création du fichier .user.ini à la racine (IMPORTANT)
        echo "; Configuration PHP pour Infomaniak" > deploy/.user.ini
        echo "display_errors = Off" >> deploy/.user.ini
        echo "log_errors = On" >> deploy/.user.ini
        echo "error_reporting = E_ALL & ~E_DEPRECATED & ~E_STRICT" >> deploy/.user.ini
        echo "max_execution_time = 120" >> deploy/.user.ini
        echo "memory_limit = 256M" >> deploy/.user.ini
        echo "upload_max_filesize = 64M" >> deploy/.user.ini
        echo "post_max_size = 64M" >> deploy/.user.ini
        chmod 644 deploy/.user.ini
        echo "Fichier .user.ini créé à la racine du déploiement"
        
        # Copie des fichiers de configuration
        echo "Copie des fichiers de configuration..."
        mkdir -p deploy/api/config
        
        # Méthode fiable pour créer le fichier env.php
        echo "<?php" > deploy/api/config/env.php
        echo "// Configuration des variables d'environnement pour Infomaniak" >> deploy/api/config/env.php
        echo "define('DB_HOST', 'p71x6d.myd.infomaniak.com');" >> deploy/api/config/env.php
        echo "define('DB_NAME', 'p71x6d_richard');" >> deploy/api/config/env.php
        echo "define('DB_USER', 'p71x6d_richard');" >> deploy/api/config/env.php
        echo "define('DB_PASS', 'Trottinette43!');" >> deploy/api/config/env.php
        echo "define('API_BASE_URL', '/api');" >> deploy/api/config/env.php
        echo "define('APP_ENV', 'production');" >> deploy/api/config/env.php
        echo "" >> deploy/api/config/env.php
        echo "// Fonction d'aide pour récupérer les variables d'environnement" >> deploy/api/config/env.php
        echo "function get_env(\$key, \$default = null) {" >> deploy/api/config/env.php
        echo "    \$const_name = strtoupper(\$key);" >> deploy/api/config/env.php
        echo "    if (defined(\$const_name)) {" >> deploy/api/config/env.php
        echo "        return constant(\$const_name);" >> deploy/api/config/env.php
        echo "    }" >> deploy/api/config/env.php
        echo "    return \$default;" >> deploy/api/config/env.php
        echo "}" >> deploy/api/config/env.php
        echo "?>" >> deploy/api/config/env.php
        echo "Fichier env.php créé par méthode fiable"
        
        # Méthode fiable pour créer le fichier db_config.json
        echo "{" > deploy/api/config/db_config.json
        echo "    \"host\": \"p71x6d.myd.infomaniak.com\"," >> deploy/api/config/db_config.json
        echo "    \"db_name\": \"p71x6d_richard\"," >> deploy/api/config/db_config.json
        echo "    \"username\": \"p71x6d_richard\"," >> deploy/api/config/db_config.json
        echo "    \"password\": \"Trottinette43!\"" >> deploy/api/config/db_config.json
        echo "}" >> deploy/api/config/db_config.json
        echo "Fichier db_config.json créé par méthode fiable"
        
        # Copie des autres fichiers de configuration
        cp api/config/DatabaseConfig.php deploy/api/config/ || echo "Fichier DatabaseConfig.php non trouvé"
        cp api/config/DatabaseConnection.php deploy/api/config/ || echo "Fichier DatabaseConnection.php non trouvé"
        cp api/config/DatabaseDiagnostics.php deploy/api/config/ || echo "Fichier DatabaseDiagnostics.php non trouvé"
        cp api/config/database.php deploy/api/config/ || echo "Fichier database.php non trouvé"
        
        # Création d'un fichier .htaccess pour les assets
        echo "# Configurer les types MIME corrects pour les assets" > deploy/assets/.htaccess
        echo "AddType text/css .css" >> deploy/assets/.htaccess
        echo "AddType application/javascript .js" >> deploy/assets/.htaccess
        echo "AddType application/javascript .mjs" >> deploy/assets/.htaccess
        echo "AddType image/svg+xml .svg" >> deploy/assets/.htaccess
        echo "AddType font/ttf .ttf" >> deploy/assets/.htaccess
        echo "AddType font/woff .woff" >> deploy/assets/.htaccess
        echo "AddType font/woff2 .woff2" >> deploy/assets/.htaccess
        echo "" >> deploy/assets/.htaccess
        echo "# Force le type MIME pour CSS" >> deploy/assets/.htaccess
        echo "<FilesMatch \"\.css$\">" >> deploy/assets/.htaccess
        echo "    ForceType text/css" >> deploy/assets/.htaccess
        echo "    Header set Content-Type \"text/css; charset=utf-8\"" >> deploy/assets/.htaccess
        echo "</FilesMatch>" >> deploy/assets/.htaccess
        echo "" >> deploy/assets/.htaccess
        echo "# Force le type MIME pour JavaScript" >> deploy/assets/.htaccess
        echo "<FilesMatch \"\.js$\">" >> deploy/assets/.htaccess
        echo "    ForceType application/javascript" >> deploy/assets/.htaccess
        echo "    Header set Content-Type \"application/javascript; charset=utf-8\"" >> deploy/assets/.htaccess
        echo "</FilesMatch>" >> deploy/assets/.htaccess
        echo "" >> deploy/assets/.htaccess
        echo "# Activer la mise en cache" >> deploy/assets/.htaccess
        echo "<IfModule mod_expires.c>" >> deploy/assets/.htaccess
        echo "  ExpiresActive On" >> deploy/assets/.htaccess
        echo "  ExpiresByType text/css \"access plus 1 week\"" >> deploy/assets/.htaccess
        echo "  ExpiresByType application/javascript \"access plus 1 week\"" >> deploy/assets/.htaccess
        echo "</IfModule>" >> deploy/assets/.htaccess
        chmod 644 deploy/assets/.htaccess
        echo "Fichier .htaccess créé pour les assets avec ForceType"
        
        # Copie explicite des fichiers API
        if [ -d "api" ]; then
          echo "Copie des fichiers API..."
          cp -r api/* deploy/api/
        else
          echo "Dossier API non trouvé"
        fi
        
        # Copie des uploads si existants
        if [ -d "public/lovable-uploads" ]; then
          echo "Copie des uploads..."
          cp -r public/lovable-uploads/* deploy/public/lovable-uploads/
        else
          echo "Dossier uploads non trouvé"
        fi
        
        # Copie des fichiers de diagnostic PHP et Bash
        echo "Copie des scripts de diagnostic..."
        cp phpinfo.php deploy/ || echo "Fichier phpinfo.php non trouvé"
        cp php-debug.php deploy/ || echo "Fichier php-debug.php non trouvé"
        cp check-paths.php deploy/ || echo "Fichier check-paths.php non trouvé"
        cp check-installation.php deploy/ || echo "Fichier check-installation.php non trouvé"
        cp deploy-check.php deploy/ || echo "Fichier deploy-check.php non trouvé"
        cp infomaniak-paths-check.php deploy/ || echo "Fichier infomaniak-paths-check.php non trouvé"
        cp diagnose-infomaniak.php deploy/ || echo "Fichier diagnose-infomaniak.php non trouvé"
        cp index.php deploy/ || echo "Fichier index.php non trouvé"
        cp deploy-on-infomaniak.php deploy/ || echo "Fichier deploy-on-infomaniak.php non trouvé"
        cp test-db-connection.php deploy/ || echo "Fichier test-db-connection.php non trouvé"
        cp test-users.php deploy/ || echo "Fichier test-users.php non trouvé"
        cp verify-users.php deploy/ || echo "Fichier verify-users.php non trouvé"
        cp user-diagnostic.php deploy/ || echo "Fichier user-diagnostic.php non trouvé"
        cp check-github-workflow.php deploy/ || echo "Fichier check-github-workflow.php non trouvé"
        cp fix-workflow-yaml.php deploy/ || echo "Fichier fix-workflow-yaml.php non trouvé"
        cp trigger-github-workflow.php deploy/ || echo "Fichier trigger-github-workflow.php non trouvé"
        cp check-build-status.php deploy/ || echo "Fichier check-build-status.php non trouvé"
        cp verify-php-ssh.sh deploy/ || echo "Fichier verify-php-ssh.sh non trouvé"
        cp test-php-execution.php deploy/ || echo "Fichier test-php-execution.php non trouvé"
        cp force-php-execution.php deploy/ || echo "Fichier force-php-execution.php non trouvé"
        cp web-php-test.php deploy/ || echo "Fichier web-php-test.php non trouvé"
        
        # Création explicite des fichiers de test PHP manquants
        # Création de test-php-execution.php
        echo '<?php
header("Content-Type: text/html; charset=utf-8");
echo "<h1>Test d'\''exécution PHP</h1>";
echo "<p>Si vous voyez ce message, PHP fonctionne correctement via le web.</p>";
echo "<p>Date et heure: " . date("Y-m-d H:i:s") . "</p>";
echo "<p>Version PHP: " . phpversion() . "</p>";
echo "<p>Extensions chargées: " . implode(", ", array_slice(get_loaded_extensions(), 0, 10)) . "...</p>";
?>' > deploy/test-php-execution.php
        chmod 644 deploy/test-php-execution.php
        echo "Fichier test-php-execution.php créé directement"
        
        # Création de force-php-execution.php
        echo '<?php
// Ce script tentera de contacter directement le moteur PHP
header("Content-Type: text/plain");

echo "=== TEST FORCÉ D'\''EXÉCUTION PHP ===\n\n";

// Informations de base
echo "Date et heure: " . date("Y-m-d H:i:s") . "\n";
echo "Version PHP: " . phpversion() . "\n";
echo "SAPI: " . php_sapi_name() . "\n\n";

// Vérifier la configuration d'\''Apache
echo "=== CONFIGURATION APACHE ===\n";
if (function_exists("apache_get_modules")) {
    echo "Modules Apache chargés: " . implode(", ", array_slice(apache_get_modules(), 0, 10)) . "...\n";
    echo "php_module ou php7_module présent: " . 
        (in_array("mod_php", apache_get_modules()) || in_array("mod_php7", apache_get_modules()) ? "OUI" : "NON") . "\n";
} else {
    echo "Fonction apache_get_modules() non disponible - PHP probablement exécuté en mode CGI/FastCGI.\n";
}

// Vérifier les directives PHP importantes
echo "\n=== DIRECTIVES PHP IMPORTANTES ===\n";
$important_directives = ["display_errors", "error_reporting", "log_errors", "error_log", "upload_max_filesize", "post_max_size"];
foreach ($important_directives as $directive) {
    echo "$directive: " . ini_get($directive) . "\n";
}

// Information sur le PATH et l'\''environnement
echo "\n=== VARIABLES D'\''ENVIRONNEMENT ===\n";
echo "PATH: " . getenv("PATH") . "\n";
echo "DOCUMENT_ROOT: " . $_SERVER["DOCUMENT_ROOT"] . "\n";
echo "SCRIPT_FILENAME: " . $_SERVER["SCRIPT_FILENAME"] . "\n";
echo "USER: " . (function_exists("posix_getpwuid") ? posix_getpwuid(posix_geteuid())["name"] : "(non disponible)") . "\n";

// Tester l'\''écriture de fichier
echo "\n=== TEST D'\''ÉCRITURE DE FICHIER ===\n";
$test_file = "php-write-test-" . time() . ".txt";
$write_result = @file_put_contents($test_file, "Test d'\''écriture");
if ($write_result !== false) {
    echo "✓ Écriture de fichier réussie ($test_file créé)\n";
    @unlink($test_file); // Supprimer le fichier de test
} else {
    echo "✗ Échec de l'\''écriture de fichier\n";
}

echo "\n=== FIN DU TEST ===\n";
?>' > deploy/force-php-execution.php
        chmod 644 deploy/force-php-execution.php
        echo "Fichier force-php-execution.php créé directement"
        
        # Création de check-build-status.php
        echo '<?php
header("Content-Type: text/html; charset=utf-8");
?>
<!DOCTYPE html>
<html>
<head>
    <title>État du déploiement</title>
    <style>
        body { font-family: Arial, sans-serif; max-width: 800px; margin: 20px auto; line-height: 1.6; }
        .success { color: green; background-color: #f0fff0; padding: 5px; border-left: 3px solid green; }
        .error { color: red; background-color: #fff0f0; padding: 5px; border-left: 3px solid red; }
        .info { background-color: #f8f9fa; padding: 10px; margin: 10px 0; border-radius: 4px; }
        code { background-color: #f0f0f0; padding: 2px 4px; border-radius: 3px; font-family: monospace; }
        table { border-collapse: collapse; width: 100%; margin: 10px 0; }
        th, td { border: 1px solid #ddd; padding: 8px; text-align: left; }
        th { background-color: #f2f2f2; }
        tr:nth-child(even) { background-color: #f9f9f9; }
    </style>
</head>
<body>
    <h1>Vérification de l'\''état du déploiement</h1>
    
    <div class="info">
        <p>Cette page vérifie que tous les fichiers importants ont été correctement déployés.</p>
    </div>
    
    <?php
    // Liste des fichiers critiques à vérifier
    $critical_files = [
        ".htaccess" => "Configuration du serveur web",
        ".user.ini" => "Configuration PHP",
        "phpinfo.php" => "Diagnostic PHP",
        "test-php-execution.php" => "Test d'\''exécution PHP",
        "force-php-execution.php" => "Test forcé d'\''exécution PHP",
        "web-php-test.php" => "Test PHP web",
        "api/.htaccess" => "Configuration API"
    ];
    
    $missing_files = [];
    $existing_files = [];
    
    foreach ($critical_files as $file => $description) {
        if (file_exists($file)) {
            $existing_files[$file] = [
                "description" => $description,
                "size" => filesize($file),
                "modified" => date("Y-m-d H:i:s", filemtime($file))
            ];
        } else {
            $missing_files[$file] = $description;
        }
    }
    ?>
    
    <h2>Résumé</h2>
    <?php if (empty($missing_files)): ?>
        <p class="success">✅ Tous les fichiers critiques ont été correctement déployés.</p>
    <?php else: ?>
        <p class="error">❌ Certains fichiers critiques sont manquants.</p>
    <?php endif; ?>
    
    <h2>Détails des fichiers</h2>
    
    <?php if (!empty($existing_files)): ?>
        <h3>Fichiers existants</h3>
        <table>
            <tr>
                <th>Fichier</th>
                <th>Description</th>
                <th>Taille</th>
                <th>Dernière modification</th>
            </tr>
            <?php foreach ($existing_files as $file => $info): ?>
            <tr>
                <td><code><?php echo htmlspecialchars($file); ?></code></td>
                <td><?php echo htmlspecialchars($info["description"]); ?></td>
                <td><?php echo $info["size"]; ?> octets</td>
                <td><?php echo $info["modified"]; ?></td>
            </tr>
            <?php endforeach; ?>
        </table>
    <?php endif; ?>
    
    <?php if (!empty($missing_files)): ?>
        <h3>Fichiers manquants</h3>
        <table>
            <tr>
                <th>Fichier</th>
                <th>Description</th>
            </tr>
            <?php foreach ($missing_files as $file => $description): ?>
            <tr>
                <td><code><?php echo htmlspecialchars($file); ?></code></td>
                <td><?php echo htmlspecialchars($description); ?></td>
            </tr>
            <?php endforeach; ?>
        </table>
        
        <div class="info">
            <p><strong>Solution:</strong> Relancez le workflow de déploiement GitHub ou créez manuellement les fichiers manquants.</p>
        </div>
    <?php endif; ?>
</body>
</html>' > deploy/check-build-status.php
        chmod 644 deploy/check-build-status.php
        echo "Fichier check-build-status.php créé directement"
        
        # Création de verify-php-ssh.sh
        echo '#!/bin/bash
# Script pour vérifier la configuration PHP d'\''un hébergement Infomaniak via SSH
# À exécuter directement sur le serveur après avoir uploadé le fichier via SSH

echo "Vérification PHP pour Qualiopi.ch - $(date)"
echo "==================================================="
echo "Utilisation du chemin de base: $(pwd)"
echo "Chemin actuel: $(pwd)"
echo "Création d'\''un fichier PHP de test..."

# Créer un petit fichier PHP pour tester l'\''exécution en mode CLI
cat > php-ssh-test.php << '\''EOF'\''
<?php
// Script de test pour vérifier l'\''exécution PHP via SSH
header("Content-Type: text/plain");

echo "=== TEST D'\''EXÉCUTION PHP VIA SSH ===\n";
echo "Date et heure: " . date("Y-m-d H:i:s") . "\n";
echo "Version PHP: " . phpversion() . "\n";
echo "Extensions chargées: " . implode(", ", get_loaded_extensions()) . "\n";
echo "User: " . (function_exists('\''posix_getpwuid'\'') ? posix_getpwuid(posix_geteuid())['\''name'\''] : '\''(inconnu)'\'') . "\n";
echo "Chemin actuel: " . getcwd() . "\n";
echo "=== FIN DU TEST ===\n";
EOF
chmod +x php-ssh-test.php

echo
echo "== Test PHP en mode CLI =="
echo "Exécution de php-ssh-test.php avec l'\''interpréteur PHP..."
php php-ssh-test.php
echo "✓ PHP CLI fonctionne correctement"

echo
echo "== Vérification de la configuration PHP pour le web =="
echo "Contenu de .htaccess lié à PHP:"
grep -E "(AddType|SetHandler|php_value|php_flag)" .htaccess 2>/dev/null || echo "Aucune configuration PHP trouvée dans .htaccess"

if [ -f ".user.ini" ]; then
  echo "Configuration .user.ini trouvée:"
  echo "  $(cat .user.ini | sed '\''s/^/  /g'\'')"
else
  echo "Fichier .user.ini non trouvé"
fi

echo
echo "== Vérification de PHP-FPM =="
if ps aux | grep -v grep | grep -q "php-fpm"; then
  echo "✓ PHP-FPM est en cours d'\''exécution"
else
  echo "✗ PHP-FPM n'\''est pas en cours d'\''exécution"
fi

echo
echo "== Test avec des chemins PHP alternatifs =="
for PHP_PATH in /usr/local/bin/php /usr/bin/php /opt/php*/bin/php; do
  if [ -x "$PHP_PATH" ]; then
    echo "Test avec $PHP_PATH:"
    $PHP_PATH -v | head -n 1
  fi
done

echo
echo "== Vérification des droits et propriétaires =="
ls -la php-ssh-test.php
ls -la

echo
echo "== Test terminé =="
echo "Si PHP CLI fonctionne mais que les scripts PHP ne s'\''exécutent pas via le web,"
echo "cela peut être dû à une configuration du serveur web ou aux droits d'\''accès."' > deploy/verify-php-ssh.sh
        chmod 755 deploy/verify-php-ssh.sh
        echo "Fichier verify-php-ssh.sh créé directement"

        # Créer des fichiers de test supplémentaires
        echo '<?php phpinfo(); ?>' > deploy/web-php-test.php
        chmod 644 deploy/web-php-test.php
        
        # Copie des scripts bash et leur rendre exécutable
        echo "Copie des scripts bash..."
        cp diagnose-infomaniak.sh deploy/ || echo "Fichier diagnose-infomaniak.sh non trouvé"
        cp check-users-ini.sh deploy/ || echo "Fichier check-users-ini.sh non trouvé"
        cp ssh-diagnostic.sh deploy/ || echo "Fichier ssh-diagnostic.sh non trouvé"
        cp deploy-manual.sh deploy/ || echo "Fichier deploy-manual.sh non trouvé"
        
        # Rendre les scripts bash exécutables
        chmod +x deploy/*.sh || echo "Impossible de rendre les scripts bash exécutables"
        
        # Copie du fichier users.ini
        cp users.ini deploy/ || echo "Copie directe de users.ini échouée"
        
        # Méthode de secours si la copie directe échoue
        if [ ! -f "deploy/users.ini" ]; then
          echo "; Configuration des utilisateurs et de leurs rôles" > deploy/users.ini
          echo "; Format: username = password:role" >> deploy/users.ini
          echo "; Exemple: admin = hashed_password:admin" >> deploy/users.ini
          echo "" >> deploy/users.ini
          echo "[users]" >> deploy/users.ini
          echo "; Utilisateur par défaut (à modifier après la première connexion)" >> deploy/users.ini
          echo "admin = admin123:admin" >> deploy/users.ini
          echo "" >> deploy/users.ini
          echo "[roles]" >> deploy/users.ini
          echo "; Définition des rôles (ne pas modifier)" >> deploy/users.ini
          echo "admin = Administrateur système" >> deploy/users.ini
          echo "manager = Responsable qualité" >> deploy/users.ini
          echo "user = Utilisateur standard" >> deploy/users.ini
          echo "auditor = Auditeur" >> deploy/users.ini
          echo "consultant = Consultant" >> deploy/users.ini
          echo "external = Partenaire externe" >> deploy/users.ini
          echo "" >> deploy/users.ini
          echo "[settings]" >> deploy/users.ini
          echo "; Paramètres de sécurité" >> deploy/users.ini
          echo "password_min_length = 8" >> deploy/users.ini
          echo "require_uppercase = true" >> deploy/users.ini
          echo "require_number = true" >> deploy/users.ini
          echo "require_special = false" >> deploy/users.ini
          echo "max_login_attempts = 5" >> deploy/users.ini
          echo "lockout_time = 30  ; minutes" >> deploy/users.ini
          echo "session_timeout = 120  ; minutes" >> deploy/users.ini
          echo "Fichier users.ini créé manuellement"
        else
          echo "Fichier users.ini copié directement du projet"
        fi
        
        # Copier le workflow GitHub lui-même
        cp -r .github/workflows/* deploy/.github/workflows/ || echo "Copie des fichiers workflow échouée"
        
        echo "Structure du dossier de déploiement:"
        find deploy -type f -name "*.php" | sort
        find deploy -type f -name "*.sh" | sort

    - name: Sync to Infomaniak server
      uses: SamKirkland/FTP-Deploy-Action@v4.3.4
      with:
        server: ${{ secrets.FTP_SERVER }}
        username: ${{ secrets.FTP_USERNAME }}
        password: ${{ secrets.FTP_PASSWORD }}
        local-dir: ./deploy/
        server-dir: /sites/qualiopi.ch/
        dangerous-clean-slate: false
        exclude: |
          **/.git*
          **/.git*/**
          **/node_modules/**
          README.md
          dist/**
          package.json
          package-lock.json
        log-level: verbose
        timeout: 120000

    - name: Clean up
      run: |
        rm -rf deploy
        rm -rf dist
