
name: Deploy to Infomaniak

on:
  push:
    branches: [ main ]
  workflow_dispatch:

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Setup Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '20'
        
    - name: Install Dependencies
      run: npm install
      
    - name: Build React App
      run: npm run build
      
    - name: Verify Build Output
      run: |
        echo "============== Debugging build output =============="
        echo "Liste d√©taill√©e des fichiers dans dist:"
        find dist -type f | sort
        
        # V√©rification sp√©cifique des fichiers API
        echo -e "\nüîç V√©rification des fichiers API critiques:"
        CRITICAL_FILES=(
          "dist/api/index.php"
          "dist/api/.htaccess"
          "dist/api/.user.ini"
          "dist/api/bibliotheque-load.php"
          "dist/api/bibliotheque-sync.php"
          "dist/api/php-execution-test.php"
        )
        
        for file in "${CRITICAL_FILES[@]}"; do
          if [ -f "$file" ]; then
            echo "‚úÖ $file existe"
          else
            echo "‚ùå $file MANQUANT"
          fi
        done
        
    - name: Create missing API files
      run: |
        mkdir -p dist/api
        
        # Cr√©er bibliotheque-load.php s'il n'existe pas
        if [ ! -f dist/api/bibliotheque-load.php ]; then
          cat > dist/api/bibliotheque-load.php << 'EOF'
<?php
header("Content-Type: application/json; charset=UTF-8");
header("Access-Control-Allow-Origin: *");

echo json_encode([
    'status' => 'success',
    'message' => 'Biblioth√®que charg√©e',
    'timestamp' => date('Y-m-d H:i:s')
]);
?>
EOF
        fi
        
        # Cr√©er bibliotheque-sync.php s'il n'existe pas
        if [ ! -f dist/api/bibliotheque-sync.php ]; then
          cat > dist/api/bibliotheque-sync.php << 'EOF'
<?php
header("Content-Type: application/json; charset=UTF-8");
header("Access-Control-Allow-Origin: *");

echo json_encode([
    'status' => 'success',
    'message' => 'Synchronisation de la biblioth√®que r√©ussie',
    'timestamp' => date('Y-m-d H:i:s')
]);
?>
EOF
        fi

    - name: Create complete directory structure
      run: |
        echo "Creating all necessary directories..."
        mkdir -p dist/api/config
        mkdir -p dist/api/controllers
        mkdir -p dist/api/middleware
        mkdir -p dist/api/models
        mkdir -p dist/api/utils
        mkdir -p dist/public/lovable-uploads
        
        # Ajout du fichier .htaccess √† la racine
        cp -v .htaccess dist/ || echo "Attention: .htaccess non trouv√© dans la racine"
        
        # Copier les fichiers PHP d'utilitaires
        cp -v fix-assets-runtime.php dist/ || echo "Attention: fix-assets-runtime.php non trouv√©"
        cp -v fix-index-references.php dist/ || echo "Attention: fix-index-references.php non trouv√©"
        cp -v utils-assets.php dist/ || echo "Attention: utils-assets.php non trouv√©"
        cp -v utils-directory.php dist/ || echo "Attention: utils-directory.php non trouv√©"
        cp -v index-validator.php dist/ || echo "Attention: index-validator.php non trouv√©"
      
    - name: Copy API files with explicit paths
      run: |
        echo "Copying API files with detailed logging..."
        
        # Copier les fichiers principaux de l'API
        cp -v api/index.php dist/api/ || echo "Attention: index.php non trouv√©"
        cp -v api/.htaccess dist/api/ || echo "Attention: .htaccess non trouv√©"
        cp -v api/.user.ini dist/api/ || echo "Attention: .user.ini non trouv√©"
        cp -v api/auth.php dist/api/ || echo "Attention: auth.php non trouv√©"
        cp -v api/test.php dist/api/ || echo "Attention: test.php non trouv√©"
        cp -v api/info.php dist/api/ || echo "Attention: info.php non trouv√©"
        cp -v api/diagnostic.php dist/api/ || echo "Attention: diagnostic.php non trouv√©"
        cp -v api/diagnostic-complet.php dist/api/ || echo "Attention: diagnostic-complet.php non trouv√©"
        cp -v api/diagnose-assets.php dist/api/ || echo "Attention: diagnose-assets.php non trouv√©"
        cp -v api/assets-check.php dist/api/ || echo "Attention: assets-check.php non trouv√©"
        cp -v api/php.ini dist/api/ || echo "Attention: php.ini non trouv√©"
        cp -v api/login-test.php dist/api/ || echo "Attention: login-test.php non trouv√©"
        cp -v api/check-users.php dist/api/ || echo "Attention: check-users.php non trouv√©"
        cp -v api/php-execution-test.php dist/api/ || echo "Attention: php-execution-test.php non trouv√©"
        cp -v api/php-diagnostic.php dist/api/ || echo "Attention: php-diagnostic.php non trouv√©"
        
        # Ajout des fichiers de gestion documentaire
        cp -v api/documents-load.php dist/api/ || echo "Attention: documents-load.php non trouv√©"
        cp -v api/documents-sync.php dist/api/ || echo "Attention: documents-sync.php non trouv√©"
        cp -v api/bibliotheque-load.php dist/api/ || echo "Attention: bibliotheque-load.php non trouv√©"
        cp -v api/bibliotheque-sync.php dist/api/ || echo "Attention: bibliotheque-sync.php non trouv√©"
        
        # Copier les fichiers de configuration
        cp -v api/config/env.php dist/api/config/ || echo "Attention: env.php non trouv√©"
        cp -v api/config/env.example.php dist/api/config/ || echo "Attention: env.example.php non trouv√©"
        cp -v api/config/database.php dist/api/config/ || echo "Attention: database.php non trouv√©"
        
        # Copier les contr√¥leurs
        cp -v api/controllers/AuthController.php dist/api/controllers/ || echo "Attention: AuthController.php non trouv√©"
        cp -v api/controllers/UserController.php dist/api/controllers/ || echo "Attention: UserController.php non trouv√©"
        cp -v api/controllers/UsersController.php dist/api/controllers/ || echo "Attention: UsersController.php non trouv√©"
        cp -v api/controllers/ConfigController.php dist/api/controllers/ || echo "Attention: ConfigController.php non trouv√©"
        cp -v api/controllers/DatabaseConfigController.php dist/api/controllers/ || echo "Attention: DatabaseConfigController.php non trouv√©"
        cp -v api/controllers/DatabaseTestController.php dist/api/controllers/ || echo "Attention: DatabaseTestController.php non trouv√©"
        
        # Copier les middlewares
        cp -v api/middleware/Auth.php dist/api/middleware/ || echo "Attention: Auth.php middleware non trouv√©"
        
        # Copier les mod√®les
        cp -v api/models/User.php dist/api/models/ || echo "Attention: User.php model non trouv√©"
        
        # Copier les utilitaires
        cp -v api/utils/JwtHandler.php dist/api/utils/ || echo "Attention: JwtHandler.php non trouv√©"
        
    - name: Copy remaining application files
      run: |
        # Copier les fichiers principaux
        cp -v deploy-on-infomaniak.php dist/ || echo "Attention: deploy-on-infomaniak.php non trouv√©"
        cp -v verify-deploy.php dist/ || echo "Attention: verify-deploy.php non trouv√©"
        cp -v deploy-check.php dist/ || echo "Attention: deploy-check.php non trouv√©"
        
        # Copier les fichiers uploads avec r√©cursion
        cp -r public/lovable-uploads/* dist/public/lovable-uploads/ || echo "Aucun fichier d'upload trouv√©"
        
        # V√©rifier si le dossier public contient d'autres fichiers importants
        find public -type f -not -path "*/lovable-uploads/*" -exec cp -v {} dist/public/ \; || echo "Pas d'autres fichiers publics trouv√©s"

    - name: Run post-build script to fix index references
      run: |
        echo "Running post-build script to ensure index.html is correct..."
        cd dist
        # Cr√©er un script temporaire pour v√©rifier les assets
        cat > check-assets.php << 'EOF'
        <?php
        $assets_js = glob('./assets/*.js');
        $assets_css = glob('./assets/*.css');
        echo "Found JS assets: " . implode(", ", $assets_js) . "\n";
        echo "Found CSS assets: " . implode(", ", $assets_css) . "\n";
        
        // V√©rifier index.html
        $index_content = file_get_contents('./index.html');
        echo "Index.html content:\n";
        echo substr($index_content, 0, 1000) . "...\n";
        ?>
        EOF
        
        php check-assets.php
        cd ..

    - name: Check structure before deployment
      run: |
        echo "Verifying structure before deployment:"
        echo "Root files:"
        ls -la dist/
        echo "API files:"
        ls -la dist/api/
        echo "API config files:"
        ls -la dist/api/config/
        echo "Public files:"
        ls -la dist/public/ || echo "No public folder"
        
    - name: Sync full dist folder to Infomaniak server
      uses: SamKirkland/FTP-Deploy-Action@v4.3.4
      with:
        server: ${{ secrets.FTP_SERVER }}
        username: ${{ secrets.FTP_USERNAME }}
        password: ${{ secrets.FTP_PASSWORD }}
        local-dir: ./dist/
        server-dir: /
        dangerous-clean-slate: false
        exclude: |
          **/.git*
          **/.git*/**
          **/node_modules/**
          README.md
          package.json
          package-lock.json
          tsconfig*.json
          *.log
        log-level: verbose
        timeout: 120000
        dry-run: false
    
    - name: Post-deployment verification
      run: |
        echo "D√©ploiement termin√©. V√©rifiez les logs pour toute erreur."
        echo "Ex√©cutez fix-assets-runtime.php sur votre serveur pour v√©rifier l'√©tat du d√©ploiement."
        echo "URL: https://qualiopi.ch/fix-assets-runtime.php"
        echo "V√©rifiez √©galement: https://qualiopi.ch/fix-index-references.php"
