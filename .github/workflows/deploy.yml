
name: Deploy to Infomaniak

on:
  push:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      reason:
        description: 'Reason for manual deployment'
        required: false
        default: 'Manual deployment'

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Setup Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '20'
        
    - name: Install Dependencies
      run: npm install --legacy-peer-deps
      
    - name: Build React App
      run: npm run build
      
    - name: Debug build output
      run: |
        echo "============== Debugging build output =============="
        echo "Liste des fichiers dans dist:"
        ls -la dist/
        echo "Liste des fichiers assets:"
        ls -la dist/assets/ || echo "Dossier assets non trouvé"

    - name: Prepare deployment directory
      run: |
        # Création des dossiers nécessaires
        mkdir -p deploy/assets
        mkdir -p deploy/api
        mkdir -p deploy/api/config
        mkdir -p deploy/api/services
        mkdir -p deploy/api/controllers
        mkdir -p deploy/api/models
        mkdir -p deploy/api/models/traits
        mkdir -p deploy/api/middleware
        mkdir -p deploy/api/operations
        mkdir -p deploy/api/utils
        mkdir -p deploy/public/lovable-uploads
        
        # Copie des fichiers compilés directement dans assets
        cp -r dist/assets/* deploy/assets/
        
        # Copie des autres fichiers nécessaires
        cp dist/index.html deploy/
        cp .htaccess deploy/ || echo "Fichier .htaccess non trouvé"
        
        # Copie des fichiers de configuration
        echo "Copie des fichiers de configuration..."
        mkdir -p deploy/api/config
        
        # Créer config/env.php avec les bonnes valeurs
        echo "<?php
        // Configuration des variables d'environnement pour Infomaniak
        define('DB_HOST', 'p71x6d.myd.infomaniak.com');
        define('DB_NAME', 'p71x6d_richard');
        define('DB_USER', 'p71x6d_richard');
        define('DB_PASS', 'Trottinette43!');
        define('API_BASE_URL', '/api');
        define('APP_ENV', 'production');

        // Fonction d'aide pour récupérer les variables d'environnement
        function get_env(\$key, \$default = null) {
            \$const_name = strtoupper(\$key);
            if (defined(\$const_name)) {
                return constant(\$const_name);
            }
            return \$default;
        }
        ?>" > deploy/api/config/env.php
        echo "Fichier env.php créé avec p71x6d_richard"
        
        # Créer config/db_config.json avec les bonnes valeurs
        echo '{
            "host": "p71x6d.myd.infomaniak.com",
            "db_name": "p71x6d_richard",
            "username": "p71x6d_richard",
            "password": "Trottinette43!"
        }' > deploy/api/config/db_config.json
        echo "Fichier db_config.json créé avec p71x6d_richard"
        
        # Copie des autres fichiers de configuration
        cp api/config/DatabaseConfig.php deploy/api/config/ || echo "Fichier DatabaseConfig.php non trouvé"
        cp api/config/DatabaseConnection.php deploy/api/config/ || echo "Fichier DatabaseConnection.php non trouvé"
        cp api/config/DatabaseDiagnostics.php deploy/api/config/ || echo "Fichier DatabaseDiagnostics.php non trouvé"
        cp api/config/database.php deploy/api/config/ || echo "Fichier database.php non trouvé"
        
        # Copie explicite des fichiers API
        if [ -d "api" ]; then
          echo "Copie des fichiers API..."
          cp -r api/* deploy/api/
        else
          echo "Dossier API non trouvé"
        fi
        
        # Copie des uploads si existants
        if [ -d "public/lovable-uploads" ]; then
          echo "Copie des uploads..."
          cp -r public/lovable-uploads/* deploy/public/lovable-uploads/
        else
          echo "Dossier uploads non trouvé"
        fi
        
        # Copie des fichiers de diagnostic PHP et Bash
        echo "Copie des scripts de diagnostic..."
        cp phpinfo.php deploy/ || echo "Fichier phpinfo.php non trouvé"
        cp php-debug.php deploy/ || echo "Fichier php-debug.php non trouvé"
        cp check-paths.php deploy/ || echo "Fichier check-paths.php non trouvé"
        cp check-installation.php deploy/ || echo "Fichier check-installation.php non trouvé"
        cp deploy-check.php deploy/ || echo "Fichier deploy-check.php non trouvé"
        cp infomaniak-paths-check.php deploy/ || echo "Fichier infomaniak-paths-check.php non trouvé"
        cp diagnose-infomaniak.php deploy/ || echo "Fichier diagnose-infomaniak.php non trouvé"
        cp index.php deploy/ || echo "Fichier index.php non trouvé"
        cp deploy-on-infomaniak.php deploy/ || echo "Fichier deploy-on-infomaniak.php non trouvé"
        cp test-db-connection.php deploy/ || echo "Fichier test-db-connection.php non trouvé"
        cp test-users.php deploy/ || echo "Fichier test-users.php non trouvé"
        cp verify-users.php deploy/ || echo "Fichier verify-users.php non trouvé"
        
        # Copie des scripts bash et leur rendre exécutable
        echo "Copie des scripts bash..."
        cp diagnose-infomaniak.sh deploy/ || echo "Fichier diagnose-infomaniak.sh non trouvé"
        cp check-users-ini.sh deploy/ || echo "Fichier check-users-ini.sh non trouvé"
        cp ssh-diagnostic.sh deploy/ || echo "Fichier ssh-diagnostic.sh non trouvé"
        
        # Rendre les scripts bash exécutables
        chmod +x deploy/*.sh || echo "Impossible de rendre les scripts bash exécutables"
        
        # Créer users.ini s'il n'existe pas
        if [ ! -f "deploy/users.ini" ]; then
          echo "; Configuration des utilisateurs et de leurs rôles
; Format: username = password:role
; Exemple: admin = hashed_password:admin

[users]
; Utilisateur par défaut (à modifier après la première connexion)
admin = admin123:admin

[roles]
; Définition des rôles (ne pas modifier)
admin = Administrateur système
manager = Responsable qualité
user = Utilisateur standard
auditor = Auditeur
consultant = Consultant
external = Partenaire externe

[settings]
; Paramètres de sécurité
password_min_length = 8
require_uppercase = true
require_number = true
require_special = false
max_login_attempts = 5
lockout_time = 30  ; minutes
session_timeout = 120  ; minutes
" > deploy/users.ini
          echo "Fichier users.ini créé manuellement"
        else
          cp users.ini deploy/ || echo "Fichier users.ini non trouvé"
        fi
        
        echo "Structure du dossier de déploiement:"
        find deploy -type f | sort

    - name: Sync to Infomaniak server
      uses: SamKirkland/FTP-Deploy-Action@v4.3.4
      with:
        server: ${{ secrets.FTP_SERVER }}
        username: ${{ secrets.FTP_USERNAME }}
        password: ${{ secrets.FTP_PASSWORD }}
        local-dir: ./deploy/
        server-dir: /sites/qualiopi.ch/
        dangerous-clean-slate: false
        exclude: |
          **/.git*
          **/.git*/**
          **/node_modules/**
          README.md
          dist/**
          package.json
          package-lock.json
        log-level: verbose
        timeout: 120000

    - name: Clean up
      run: |
        rm -rf deploy
        rm -rf dist
