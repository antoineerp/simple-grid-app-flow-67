
name: Simple Deploy to Infomaniak

on:
  push:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      reason:
        description: 'Raison du déploiement manuel'
        required: false
        default: 'Déploiement manuel'

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v3
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        fetch-depth: 0

    - name: Setup Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '18'
        
    - name: Install Dependencies
      run: npm install --legacy-peer-deps
      
    - name: Check for duplicate routes
      run: |
        echo "Vérification des routes en double dans App.tsx..."
        php -f check-routes.php || echo "Erreur d'exécution de check-routes.php"
        echo "Note: Des routes en double peuvent causer des problèmes de navigation."
      
    - name: Build React App
      run: npm run build
      
    - name: Debug build output
      run: |
        echo "============== Debugging build output =============="
        echo "Liste des fichiers générés:"
        ls -la dist/
        ls -la dist/assets/ || echo "Dossier assets non trouvé"
        find dist -name "*.css" | grep -i main || echo "Aucun fichier main CSS trouvé dans dist"
        find dist -name "*.js" | grep -i index || echo "Aucun fichier index JS trouvé dans dist"
        find dist -name "*.js" | grep -i main || echo "Aucun fichier main JS trouvé dans dist"
      
    - name: Create necessary directories and fix files
      run: |
        echo "Executing pre-deploy fixes..."
        
        # Créer TOUS les dossiers nécessaires explicitement
        mkdir -p deploy
        mkdir -p deploy/assets
        mkdir -p deploy/api/config
        mkdir -p deploy/api/controllers
        mkdir -p deploy/api/models
        mkdir -p deploy/api/middleware
        mkdir -p deploy/api/operations
        mkdir -p deploy/api/utils
        mkdir -p deploy/api/documentation
        mkdir -p deploy/public/lovable-uploads
        mkdir -p deploy/.github/workflows
        
        # Créer explicitement le dossier api-tools
        mkdir -p deploy/api-tools
        echo "✅ Dossier api-tools créé explicitement"
        touch deploy/api-tools/.gitkeep
        
        # Exécution du script de préparation
        php -f pre-deploy-fix.php
        echo "✅ Pre-deploy fixes completed"
        
    - name: Execute deployment script
      run: |
        chmod +x deploy-simple.sh
        ./deploy-simple.sh
        
    - name: Copy source files (ts, tsx) for debugging
      run: |
        echo "Copying source files (.ts, .tsx, etc.) for debugging..."
        mkdir -p deploy/src
        cp -r src/* deploy/src/
        echo "✅ Source files copied"
        
    - name: Create api-tools diagnostic files
      run: |
        echo "Creating necessary files in api-tools directory..."
        
        # Copier ou créer des fichiers dans api-tools
        mkdir -p deploy/api-tools
        
        # Créer check-route-duplication.php directement
        cat > deploy/api-tools/check-route-duplication.php << 'EOPHP'
<?php
header('Content-Type: text/html; charset=utf-8');
echo "<h1>Vérification des routes</h1>";
echo "<p>Ce script analyse les routes définies dans App.tsx et détecte les doublons.</p>";

// Fonction pour analyser App.tsx
function analyzeAppTsx() {
    $filepath = "../src/App.tsx";
    if (!file_exists($filepath)) {
        return ['error' => "Fichier App.tsx introuvable dans " . realpath("../src")];
    }
    
    $content = file_get_contents($filepath);
    $routes = [];
    
    // Rechercher les routes
    preg_match_all('/<Route\s+path=[\'"]([^\'"]*)[\'"]/', $content, $matches);
    
    if (!empty($matches[1])) {
        foreach ($matches[1] as $route) {
            if (!isset($routes[$route])) {
                $routes[$route] = 1;
            } else {
                $routes[$route]++;
            }
        }
    }
    
    return $routes;
}

$routes = analyzeAppTsx();
if (isset($routes['error'])) {
    echo "<p style='color: red;'>Erreur: " . htmlspecialchars($routes['error']) . "</p>";
} else {
    echo "<h2>Routes définies dans App.tsx</h2>";
    echo "<table border='1' cellpadding='5'>";
    echo "<tr><th>Route</th><th>Occurrences</th><th>Statut</th></tr>";
    
    foreach ($routes as $route => $count) {
        echo "<tr>";
        echo "<td>" . htmlspecialchars($route) . "</td>";
        echo "<td>" . $count . "</td>";
        if ($count > 1) {
            echo "<td style='color: red; font-weight: bold;'>DOUBLON</td>";
        } else {
            echo "<td style='color: green;'>OK</td>";
        }
        echo "</tr>";
    }
    
    echo "</table>";
    
    $duplicates = false;
    foreach ($routes as $route => $count) {
        if ($count > 1) {
            $duplicates = true;
            break;
        }
    }
    
    if ($duplicates) {
        echo "<p style='color: red;'>⚠️ Des routes en double ont été détectées!</p>";
        echo "<p><a href='fix-routes.php' style='color: blue;'>Cliquez ici pour corriger automatiquement</a></p>";
    } else {
        echo "<p style='color: green;'>✅ Aucune route en double détectée.</p>";
    }
}

echo "<p><a href='/'>Retour à l'accueil</a></p>";
?>
EOPHP

        # Créer un fichier check-routes.php basique si nécessaire
        cat > deploy/api-tools/check-routes.php << 'EOPHP'
<?php
header('Content-Type: text/html; charset=utf-8');
echo "<h1>Vérification des routes</h1>";

// Appel vers l'outil complet
echo "<p>Redirection vers l'outil complet de vérification...</p>";
echo "<script>window.location.href = 'check-route-duplication.php';</script>";
echo "<p>Si la redirection ne fonctionne pas, <a href='check-route-duplication.php'>cliquez ici</a>.</p>";
?>
EOPHP

        # Créer un fichier fix-routes.php basique
        cat > deploy/api-tools/fix-routes.php << 'EOPHP'
<?php
header('Content-Type: text/html; charset=utf-8');
echo "<h1>Correction des routes</h1>";
echo "<p>Ce script tente de corriger les routes en double dans App.tsx.</p>";

$appFile = "../src/App.tsx";
$backupFile = "../src/App.tsx.bak-" . date("Ymd-His");

if (!file_exists($appFile)) {
    echo "<p style='color: red;'>Erreur: Fichier App.tsx introuvable dans " . realpath("../src") . "</p>";
    exit;
}

// Créer une sauvegarde
if (copy($appFile, $backupFile)) {
    echo "<p>Sauvegarde créée: " . basename($backupFile) . "</p>";
} else {
    echo "<p style='color: red;'>Attention: Impossible de créer une sauvegarde!</p>";
}

echo "<p>Analyse en cours...</p>";
echo "<p>Pour retourner à l'outil de vérification, <a href='check-route-duplication.php'>cliquez ici</a>.</p>";
echo "<p><a href='/'>Retour à l'accueil</a></p>";
?>
EOPHP

        echo "✅ Fichiers de diagnostic créés dans le répertoire api-tools"
        
        # Vérifier le contenu du dossier
        echo "Contenu du dossier api-tools:"
        find deploy/api-tools -type f | sort
        
    - name: Upload deployment artifact
      uses: actions/upload-artifact@v4
      with:
        name: deployment-files
        path: deploy/
        retention-days: 1
      
    - name: Copy assets directory and essential files
      run: |
        echo "Copying assets directory and essential files..."
        
        # Copier tous les assets
        if [ -d "assets" ]; then
          echo "Copying all files from assets to deploy/assets..."
          mkdir -p deploy/assets
          cp -r assets/* deploy/assets/
          echo "✅ Assets directory copied"
        fi
        
        # Copier spécifiquement index.js s'il existe
        if [ -f "assets/index.js" ]; then
          echo "Ensuring index.js is copied to deploy/assets..."
          mkdir -p deploy/assets
          cp assets/index.js deploy/assets/
          echo "✅ index.js copied"
        fi
        
        # Copier également depuis dist/assets si disponible
        if [ -d "dist/assets" ]; then
          echo "Copying all files from dist/assets to deploy/assets..."
          mkdir -p deploy/assets
          cp -r dist/assets/* deploy/assets/
          echo "✅ dist/assets directory copied"
        fi
        
        # Vérification des fichiers critiques
        echo "Checking for critical files in deploy/assets:"
        ls -la deploy/assets/ || echo "⚠️ deploy/assets not available"
      
    - name: Find and copy hashed files
      run: |
        echo "Finding and copying hashed files..."
        mkdir -p deploy/assets
        
        # Copier tous les fichiers CSS et JS hachés de dist/assets vers deploy/assets
        if [ -d "dist/assets" ]; then
          echo "Copying all hashed files from dist/assets to deploy/assets..."
          cp -r dist/assets/* deploy/assets/
          echo "✅ Hashed files copied"
          
          # Créer des liens symboliques pour index.js et main.js vers les versions hachées
          INDEX_JS=$(find dist/assets -name "index*.js" | head -1)
          MAIN_JS=$(find dist/assets -name "main*.js" | head -1)
          
          if [ -n "$INDEX_JS" ]; then
            echo "Found hashed index.js: $INDEX_JS"
            cp "$INDEX_JS" deploy/assets/index.js
            echo "✅ Created index.js link to hashed version"
          fi
          
          if [ -n "$MAIN_JS" ]; then
            echo "Found hashed main.js: $MAIN_JS"
            cp "$MAIN_JS" deploy/assets/main.js
            echo "✅ Created main.js link to hashed version"
          fi
          
          # Faire de même pour les CSS
          INDEX_CSS=$(find dist/assets -name "index*.css" | head -1)
          MAIN_CSS=$(find dist/assets -name "main*.css" | head -1)
          
          if [ -n "$INDEX_CSS" ]; then
            echo "Found hashed index.css: $INDEX_CSS"
            cp "$INDEX_CSS" deploy/assets/index.css
            echo "✅ Created index.css link to hashed version"
          fi
          
          if [ -n "$MAIN_CSS" ]; then
            echo "Found hashed main.css: $MAIN_CSS"
            cp "$MAIN_CSS" deploy/assets/main.css
            echo "✅ Created main.css link to hashed version"
          fi
        else
          echo "⚠️ dist/assets not found"
        fi
        
        # Vérification des assets copiés
        echo "Assets copied to deploy/assets:"
        ls -la deploy/assets/
      
    - name: Copy .htaccess files and verify crucial files
      run: |
        echo "Copying .htaccess files..."
        # Copier le fichier .htaccess de la racine s'il existe
        if [ -f ".htaccess" ]; then
          cp .htaccess deploy/
          echo "✅ Root .htaccess copied"
        fi
        
        # Copier le fichier .htaccess de l'API s'il existe
        if [ -f "api/.htaccess" ]; then
          mkdir -p deploy/api
          cp api/.htaccess deploy/api/
          echo "✅ API .htaccess copied"
        fi
        
        # Copier le fichier .htaccess des assets s'il existe
        if [ -f "assets/.htaccess" ]; then
          mkdir -p deploy/assets
          cp assets/.htaccess deploy/assets/
          echo "✅ Assets .htaccess copied"
        fi
        
        # Vérifier les fichiers cruciaux avant déploiement
        echo "Final verification of crucial files:"
        [ -f "deploy/index.html" ] && echo "✅ index.html: PRÉSENT" || echo "❌ index.html: MANQUANT"
        [ -f "deploy/assets/index.js" ] && echo "✅ assets/index.js: PRÉSENT" || echo "❌ assets/index.js: MANQUANT" 
        [ -f "deploy/assets/main.css" ] && echo "✅ assets/main.css: PRÉSENT" || echo "❌ assets/main.css: MANQUANT"
        [ -d "deploy/api-tools" ] && echo "✅ api-tools directory: PRÉSENT" || echo "❌ api-tools directory: MANQUANT"
        [ -f "deploy/api-tools/check-route-duplication.php" ] && echo "✅ check-route-duplication.php: PRÉSENT" || echo "❌ check-route-duplication.php: MANQUANT"
        [ -f "deploy/api-tools/check-routes.php" ] && echo "✅ check-routes.php: PRÉSENT" || echo "❌ check-routes.php: MANQUANT"
        find deploy/api-tools -type f | wc -l
    
    - name: FTP Deploy to Infomaniak
      uses: SamKirkland/FTP-Deploy-Action@v4.3.4
      with:
        server: ${{ secrets.FTP_SERVER }}
        username: ${{ secrets.FTP_USERNAME }}
        password: ${{ secrets.FTP_PASSWORD }}
        local-dir: ./deploy/
        server-dir: /sites/qualiopi.ch/
        dangerous-clean-slate: false
        exclude: |
          **/.git*
          **/.git*/**
          **/node_modules/**
          README.md
        log-level: verbose
        timeout: 120000

