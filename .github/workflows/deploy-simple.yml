
name: Simple Deploy to Infomaniak

on:
  push:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      reason:
        description: 'Raison du déploiement manuel'
        required: false
        default: 'Déploiement manuel'

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v3
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        fetch-depth: 0

    - name: Setup Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '18'
        
    - name: Install Dependencies
      run: npm install --legacy-peer-deps
      
    - name: Build React App
      run: npm run build
      
    - name: Debug build output
      run: |
        echo "============== Debugging build output =============="
        echo "Liste des fichiers générés:"
        ls -la dist/
        ls -la dist/assets/ || echo "Dossier assets non trouvé"
        find dist -name "*.css" | grep -i main || echo "Aucun fichier main CSS trouvé dans dist"
        find dist -name "*.js" | grep -i index || echo "Aucun fichier index JS trouvé dans dist"
        find dist -name "*.js" | grep -i main || echo "Aucun fichier main JS trouvé dans dist"
      
    - name: Create API directories and fix files
      run: |
        echo "Executing pre-deploy fixes..."
        php -f pre-deploy-fix.php
        echo "✅ Pre-deploy fixes completed"
        
    - name: Execute deployment script
      run: |
        chmod +x deploy-simple.sh
        ./deploy-simple.sh
        
    - name: Upload deployment artifact
      uses: actions/upload-artifact@v4
      with:
        name: deployment-files
        path: deploy/
        retention-days: 1
      
    - name: Create API diagnostic tools
      run: |
        echo "Creating API diagnostic tools..."
        mkdir -p deploy/api-tools
        cp fix-cors.php deploy/ || echo "fix-cors.php not found"
        cp fix-htaccess.php deploy/ || echo "fix-htaccess.php not found" 
        cp create-api-htaccess.php deploy/ || echo "create-api-htaccess.php not found"
        cp fix-css-deployment.php deploy/ || echo "fix-css-deployment.php not found"
        cp correct-htaccess-for-php.sh deploy/ || echo "correct-htaccess-for-php.sh not found"
      
    - name: Copy assets directory and essential files
      run: |
        echo "Copying assets directory and essential files..."
        
        # Copier tous les assets
        if [ -d "assets" ]; then
          echo "Copying all files from assets to deploy/assets..."
          mkdir -p deploy/assets
          cp -r assets/* deploy/assets/
          echo "✅ Assets directory copied"
        fi
        
        # Copier spécifiquement index.js s'il existe
        if [ -f "assets/index.js" ]; then
          echo "Ensuring index.js is copied to deploy/assets..."
          mkdir -p deploy/assets
          cp assets/index.js deploy/assets/
          echo "✅ index.js copied"
        fi
        
        # Copier également depuis dist/assets si disponible
        if [ -d "dist/assets" ]; then
          echo "Copying all files from dist/assets to deploy/assets..."
          mkdir -p deploy/assets
          cp -r dist/assets/* deploy/assets/
          echo "✅ dist/assets directory copied"
        fi
        
        # Vérification des fichiers critiques
        echo "Checking for critical files in deploy/assets:"
        ls -la deploy/assets/ || echo "⚠️ deploy/assets not available"
      
    - name: Find and copy hashed files
      run: |
        echo "Finding and copying hashed files..."
        mkdir -p deploy/assets
        
        # Copier tous les fichiers CSS et JS hachés de dist/assets vers deploy/assets
        if [ -d "dist/assets" ]; then
          echo "Copying all hashed files from dist/assets to deploy/assets..."
          cp -r dist/assets/* deploy/assets/
          echo "✅ Hashed files copied"
          
          # Créer des liens symboliques pour index.js et main.js vers les versions hachées
          INDEX_JS=$(find dist/assets -name "index*.js" | head -1)
          MAIN_JS=$(find dist/assets -name "main*.js" | head -1)
          
          if [ -n "$INDEX_JS" ]; then
            echo "Found hashed index.js: $INDEX_JS"
            cp "$INDEX_JS" deploy/assets/index.js
            echo "✅ Created index.js link to hashed version"
          fi
          
          if [ -n "$MAIN_JS" ]; then
            echo "Found hashed main.js: $MAIN_JS"
            cp "$MAIN_JS" deploy/assets/main.js
            echo "✅ Created main.js link to hashed version"
          fi
          
          # Faire de même pour les CSS
          INDEX_CSS=$(find dist/assets -name "index*.css" | head -1)
          MAIN_CSS=$(find dist/assets -name "main*.css" | head -1)
          
          if [ -n "$INDEX_CSS" ]; then
            echo "Found hashed index.css: $INDEX_CSS"
            cp "$INDEX_CSS" deploy/assets/index.css
            echo "✅ Created index.css link to hashed version"
          fi
          
          if [ -n "$MAIN_CSS" ]; then
            echo "Found hashed main.css: $MAIN_CSS"
            cp "$MAIN_CSS" deploy/assets/main.css
            echo "✅ Created main.css link to hashed version"
          fi
        else
          echo "⚠️ dist/assets not found"
        fi
        
        # Vérification des assets copiés
        echo "Assets copied to deploy/assets:"
        ls -la deploy/assets/
      
    - name: FTP Deploy to Infomaniak
      uses: SamKirkland/FTP-Deploy-Action@v4.3.4
      with:
        server: ${{ secrets.FTP_SERVER }}
        username: ${{ secrets.FTP_USERNAME }}
        password: ${{ secrets.FTP_PASSWORD }}
        local-dir: ./deploy/
        server-dir: /sites/qualiopi.ch/
        dangerous-clean-slate: false
        exclude: |
          **/.git*
          **/.git*/**
          **/node_modules/**
          README.md
        log-level: verbose
        timeout: 120000
        
    - name: Verify css and critical files after deployment
      uses: appleboy/ssh-action@master
      with:
        host: ${{ secrets.FTP_SERVER }}
        username: ${{ secrets.FTP_USERNAME }}
        password: ${{ secrets.FTP_PASSWORD }}
        script: |
          cd /sites/qualiopi.ch/
          echo "=== Vérification post-déploiement ==="
          [ -f "assets/main.css" ] && echo "✅ assets/main.css: PRÉSENT" || echo "❌ assets/main.css: MANQUANT"
          [ -f "index.html" ] && echo "✅ index.html: PRÉSENT" || echo "❌ index.html: MANQUANT"
          [ -f "api/.htaccess" ] && echo "✅ api/.htaccess: PRÉSENT" || echo "❌ api/.htaccess: MANQUANT"
          [ -f "api/config/env.php" ] && echo "✅ api/config/env.php: PRÉSENT" || echo "❌ api/config/env.php: MANQUANT"
          [ -f "assets/index.js" ] && echo "✅ assets/index.js: PRÉSENT" || echo "❌ assets/index.js: MANQUANT"
          [ -f "assets/main.js" ] && echo "✅ assets/main.js: PRÉSENT" || echo "❌ assets/main.js: MANQUANT"
          
          # Lister tous les fichiers hachés trouvés
          echo "=== Fichiers hachés trouvés ==="
          find assets -name "*.js" | grep -E '[a-zA-Z0-9]{8}\.' || echo "❌ Aucun fichier JS haché trouvé"
          find assets -name "*.css" | grep -E '[a-zA-Z0-9]{8}\.' || echo "❌ Aucun fichier CSS haché trouvé"
          
          # Exécuter le script de préparation
          php -f pre-deploy-fix.php || echo "❌ Error running pre-deploy-fix.php"
          
          # Exécuter la réparation automatique des erreurs CORS
          php -f fix-cors.php || echo "❌ Error running fix-cors.php"
          
          # Corriger les problèmes de CSS si nécessaire
          php -f fix-css-deployment.php || echo "❌ Error running fix-css-deployment.php"
          
          # Corriger les chemins dans .htaccess
          php -f fix-htaccess.php || echo "❌ Error running fix-htaccess.php"
          
          # Créer un fichier .htaccess pour l'API si nécessaire
          [ -f "api/.htaccess" ] || php -f create-api-htaccess.php || echo "❌ Error creating API .htaccess"
          
          # Exécuter le script de diagnostic en arrière-plan
          php -f post-deploy-css-check.php || echo "❌ Error running post-deploy-css-check.php"
          
          # Vérifier et réparer les références d'assets dans index.html
          php -f fix-index-assets-simplified.php || echo "❌ Error running fix-index-assets-simplified.php"
