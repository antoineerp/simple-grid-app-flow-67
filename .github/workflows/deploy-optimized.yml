
name: Optimized Deploy to Infomaniak

on:
  push:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      reason:
        description: 'Raison du déploiement manuel'
        required: false
        default: 'Déploiement manuel'

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v3
      with:
        fetch-depth: 0

    - name: Setup Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '20'
        
    - name: Install Dependencies
      run: npm install --legacy-peer-deps
      
    - name: Build React App
      run: npm run build
      
    - name: Debug build output
      run: |
        echo "============== Debugging build output =============="
        ls -la dist/
        ls -la dist/assets/ || echo "Dossier assets non trouvé"
        
    - name: Prepare deployment files
      run: |
        # Création des dossiers nécessaires
        mkdir -p deploy/assets
        mkdir -p deploy/api/config
        mkdir -p deploy/api/controllers
        mkdir -p deploy/api/models
        mkdir -p deploy/api/middleware
        mkdir -p deploy/api/operations
        mkdir -p deploy/api/utils
        mkdir -p deploy/api/services
        mkdir -p deploy/public/lovable-uploads
        mkdir -p deploy/.github/workflows
        
        # Copie des fichiers compilés
        cp -r dist/assets/* deploy/assets/
        cp dist/index.html deploy/
        
        # Copie des fichiers PHP critiques
        echo "Copie des fichiers PHP et de configuration..."
        cp index.php deploy/ || echo "index.php non trouvé"
        cp phpinfo.php deploy/ || echo "phpinfo.php non trouvé"
        cp php-test-minimal.php deploy/ || echo "php-test-minimal.php non trouvé"
        cp test-php-execution.php deploy/ || echo "test-php-execution.php non trouvé"
        
        # Copie des fichiers .htaccess
        cp .htaccess deploy/ || echo ".htaccess racine non trouvé"
        cp api/.htaccess deploy/api/ || echo "api/.htaccess non trouvé"
        cp assets/.htaccess deploy/assets/ || echo "assets/.htaccess non trouvé"
        
        # Copie des fichiers de configuration utilisateur
        cp .user.ini deploy/ || echo ".user.ini non trouvé"
        
        # Configuration API
        if [ -d "api" ]; then
          echo "Copie des fichiers API..."
          find api -name "*.php" -type f | while read file; do
            dir=$(dirname "$file")
            mkdir -p "deploy/$dir"
            cp "$file" "deploy/$file"
          done
        else
          echo "Dossier API non trouvé"
        fi
        
        # Configuration spécifique
        echo "<?php" > deploy/api/config/env.php
        echo "// Configuration des variables d'environnement pour Infomaniak" >> deploy/api/config/env.php
        echo "define(\"DB_HOST\", \"p71x6d.myd.infomaniak.com\");" >> deploy/api/config/env.php
        echo "define(\"DB_NAME\", \"p71x6d_richard\");" >> deploy/api/config/env.php
        echo "define(\"DB_USER\", \"p71x6d_richard\");" >> deploy/api/config/env.php
        echo "define(\"DB_PASS\", \"Trottinette43!\");" >> deploy/api/config/env.php
        echo "define(\"API_BASE_URL\", \"/api\");" >> deploy/api/config/env.php
        echo "define(\"APP_ENV\", \"production\");" >> deploy/api/config/env.php
        echo "" >> deploy/api/config/env.php
        echo "// Fonction d'aide pour récupérer les variables d'environnement" >> deploy/api/config/env.php
        echo "function get_env(\$key, \$default = null) {" >> deploy/api/config/env.php
        echo "    \$const_name = strtoupper(\$key);" >> deploy/api/config/env.php
        echo "    if (defined(\$const_name)) {" >> deploy/api/config/env.php
        echo "        return constant(\$const_name);" >> deploy/api/config/env.php
        echo "    }" >> deploy/api/config/env.php
        echo "    return \$default;" >> deploy/api/config/env.php
        echo "}" >> deploy/api/config/env.php
        echo "?>" >> deploy/api/config/env.php
        
        # Configuration db_config.json
        cp api/config/db_config.json deploy/api/config/ || echo "Création du fichier db_config.json..."
        if [ ! -f "deploy/api/config/db_config.json" ]; then
          echo '{' > deploy/api/config/db_config.json
          echo '    "host": "p71x6d.myd.infomaniak.com",' >> deploy/api/config/db_config.json
          echo '    "db_name": "p71x6d_richard",' >> deploy/api/config/db_config.json
          echo '    "username": "p71x6d_richard",' >> deploy/api/config/db_config.json
          echo '    "password": "Trottinette43!"' >> deploy/api/config/db_config.json
          echo '}' >> deploy/api/config/db_config.json
        fi
        
        # Copie des uploads si existants
        if [ -d "public/lovable-uploads" ]; then
          echo "Copie des fichiers uploads..."
          cp -r public/lovable-uploads/* deploy/public/lovable-uploads/ 2>/dev/null || echo "Aucun upload à copier"
        fi
        
        # Vérification des fichiers critiques
        echo ""
        echo "=== Vérification des fichiers critiques ==="
        for file in "deploy/.htaccess" "deploy/api/.htaccess" "deploy/assets/.htaccess" "deploy/index.php" "deploy/index.html"; do
          if [ -f "$file" ]; then
            echo "✅ $file: PRÉSENT"
          else
            echo "❌ $file: MANQUANT"
          fi
        done
        
        # Permissions
        find deploy -type d -exec chmod 755 {} \;
        find deploy -type f -exec chmod 644 {} \;

    - name: FTP Deploy to Infomaniak
      uses: SamKirkland/FTP-Deploy-Action@v4.3.4
      with:
        server: ${{ secrets.FTP_SERVER }}
        username: ${{ secrets.FTP_USERNAME }}
        password: ${{ secrets.FTP_PASSWORD }}
        local-dir: ./deploy/
        server-dir: /sites/qualiopi.ch/
        dangerous-clean-slate: false
        exclude: |
          **/.git*
          **/.git*/**
          **/node_modules/**
          README.md
        log-level: verbose
        timeout: 120000
        
    - name: Clean up
      run: rm -rf deploy
