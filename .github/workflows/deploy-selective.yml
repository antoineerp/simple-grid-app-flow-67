
name: Selective Deploy to Infomaniak

on:
  push:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      reason:
        description: 'Raison du déploiement manuel'
        required: false
        default: 'Déploiement manuel'

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v3
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        fetch-depth: 0  # Permet d'accéder à l'historique complet pour les comparaisons

    - name: Setup Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '20'
        
    - name: Install Dependencies
      run: npm install --legacy-peer-deps
      
    - name: Build React App
      run: npm run build
      
    - name: Get changed files
      id: changed-files
      run: |
        # Récupérer le commit précédent
        PREVIOUS_COMMIT=$(git rev-parse HEAD~1)
        CURRENT_COMMIT=$(git rev-parse HEAD)
        
        echo "Comparaison entre $PREVIOUS_COMMIT et $CURRENT_COMMIT"
        
        # Créer un fichier temporaire pour la liste des fichiers modifiés
        git diff --name-status $PREVIOUS_COMMIT $CURRENT_COMMIT > changed_files.txt
        
        # Afficher les fichiers changés pour le log
        echo "Fichiers modifiés:"
        cat changed_files.txt
        
        # Comptage des fichiers modifiés
        MODIFIED_COUNT=$(grep -c "^M" changed_files.txt)
        ADDED_COUNT=$(grep -c "^A" changed_files.txt)
        DELETED_COUNT=$(grep -c "^D" changed_files.txt)
        
        echo "Fichiers modifiés: $MODIFIED_COUNT"
        echo "Fichiers ajoutés: $ADDED_COUNT"
        echo "Fichiers supprimés: $DELETED_COUNT"
        
    - name: Prepare deployment directory
      run: |
        # Créer le répertoire de déploiement
        mkdir -p deploy
        
        # Copier les fichiers de build compilés (ces fichiers sont toujours à envoyer)
        echo "Copie des fichiers compilés..."
        mkdir -p deploy/assets
        cp -r dist/assets/* deploy/assets/
        cp dist/index.html deploy/ || echo "index.html non trouvé dans dist/"
        
        # Créer les dossiers nécessaires pour éviter les erreurs FTP
        mkdir -p deploy/api/config
        mkdir -p deploy/api/controllers
        mkdir -p deploy/api/models
        
        # Traiter les fichiers modifiés et ajoutés depuis le dernier commit
        echo "Traitement des fichiers changés..."
        while IFS= read -r line; do
          # Extraire le statut (M pour modifié, A pour ajouté, D pour supprimé) et le chemin du fichier
          STATUS=$(echo "$line" | cut -c1)
          FILEPATH=$(echo "$line" | cut -c3-)
          
          # Ignorer certains fichiers et dossiers
          if [[ "$FILEPATH" == "node_modules/"* ]] || [[ "$FILEPATH" == ".git/"* ]]; then
            echo "Ignoré: $FILEPATH"
            continue
          fi
          
          # Pour les fichiers modifiés ou ajoutés
          if [[ "$STATUS" == "M" ]] || [[ "$STATUS" == "A" ]]; then
            # Vérifier si le fichier existe
            if [ -f "$FILEPATH" ]; then
              # Créer le répertoire parent dans deploy si nécessaire
              PARENT_DIR=$(dirname "deploy/$FILEPATH")
              mkdir -p "$PARENT_DIR"
              
              # Copier le fichier
              cp "$FILEPATH" "deploy/$FILEPATH"
              echo "Copié: $FILEPATH"
            fi
          fi
          
          # Pour les fichiers supprimés, on peut éventuellement générer un script de nettoyage
          # mais nous ne le supprimons pas directement via FTP pour éviter des problèmes
          
        done < changed_files.txt
        
        # Ajouter les fichiers critiques qui doivent toujours être présents
        cp .htaccess deploy/ || echo ".htaccess non trouvé"
        
        # Créer/mettre à jour les fichiers de configuration dans tous les cas
        echo "<?php" > deploy/api/config/env.php
        echo "// Configuration des variables d'environnement pour Infomaniak" >> deploy/api/config/env.php
        echo "define(\"DB_HOST\", \"p71x6d.myd.infomaniak.com\");" >> deploy/api/config/env.php
        echo "define(\"DB_NAME\", \"p71x6d_richard\");" >> deploy/api/config/env.php
        echo "define(\"DB_USER\", \"p71x6d_richard\");" >> deploy/api/config/env.php
        echo "define(\"DB_PASS\", \"Trottinette43!\");" >> deploy/api/config/env.php
        echo "define(\"API_BASE_URL\", \"/api\");" >> deploy/api/config/env.php
        echo "define(\"APP_ENV\", \"production\");" >> deploy/api/config/env.php
        echo "" >> deploy/api/config/env.php
        echo "// Fonction d'aide pour récupérer les variables d'environnement" >> deploy/api/config/env.php
        echo "function get_env(\$key, \$default = null) {" >> deploy/api/config/env.php
        echo "    \$const_name = strtoupper(\$key);" >> deploy/api/config/env.php
        echo "    if (defined(\$const_name)) {" >> deploy/api/config/env.php
        echo "        return constant(\$const_name);" >> deploy/api/config/env.php
        echo "    }" >> deploy/api/config/env.php
        echo "    return \$default;" >> deploy/api/config/env.php
        echo "}" >> deploy/api/config/env.php
        echo "?>" >> deploy/api/config/env.php
        
        echo '{' > deploy/api/config/db_config.json
        echo '    "host": "p71x6d.myd.infomaniak.com",' >> deploy/api/config/db_config.json
        echo '    "db_name": "p71x6d_richard",' >> deploy/api/config/db_config.json
        echo '    "username": "p71x6d_richard",' >> deploy/api/config/db_config.json
        echo '    "password": "Trottinette43!"' >> deploy/api/config/db_config.json
        echo '}' >> deploy/api/config/db_config.json
        
        # Assurer que le fichier .htaccess de l'API existe
        if [ ! -f "deploy/api/.htaccess" ]; then
          echo "# Activer la réécriture d'URL" > deploy/api/.htaccess
          echo "RewriteEngine On" >> deploy/api/.htaccess
          echo "" >> deploy/api/.htaccess
          echo "# Définir les types MIME corrects" >> deploy/api/.htaccess
          echo "AddType application/javascript .js" >> deploy/api/.htaccess
          echo "AddType application/javascript .mjs" >> deploy/api/.htaccess
          echo "AddType text/css .css" >> deploy/api/.htaccess
          echo "AddType application/json .json" >> deploy/api/.htaccess
          echo "" >> deploy/api/.htaccess
          echo "# Gérer les requêtes OPTIONS pour CORS" >> deploy/api/.htaccess
          echo "RewriteCond %{REQUEST_METHOD} OPTIONS" >> deploy/api/.htaccess
          echo "RewriteRule ^(.*)$ \$1 [R=200,L]" >> deploy/api/.htaccess
          echo "" >> deploy/api/.htaccess
          echo "# Configuration CORS" >> deploy/api/.htaccess
          echo "<IfModule mod_headers.c>" >> deploy/api/.htaccess
          echo "    Header set Access-Control-Allow-Origin \"*\"" >> deploy/api/.htaccess
          echo "    Header set Access-Control-Allow-Methods \"GET, POST, OPTIONS, PUT, DELETE\"" >> deploy/api/.htaccess
          echo "    Header set Access-Control-Allow-Headers \"Content-Type, Authorization, X-Requested-With\"" >> deploy/api/.htaccess
          echo "</IfModule>" >> deploy/api/.htaccess
        fi
        
        # Ajouter les scripts de diagnostic importants
        cp fix-index-html.php deploy/ || echo "Création de fix-index-html.php..."
        cp check-deployment-issues.php deploy/ || echo "Création de check-deployment-issues.php..."
        
        # Afficher le rapport
        echo "=== Rapport de déploiement ==="
        echo "Fichiers prêts pour le déploiement:"
        find deploy -type f | wc -l
        echo "Top 10 fichiers:"
        find deploy -type f | head -10

    - name: FTP Deploy to Infomaniak
      uses: SamKirkland/FTP-Deploy-Action@v4.3.4
      with:
        server: ${{ secrets.FTP_SERVER }}
        username: ${{ secrets.FTP_USERNAME }}
        password: ${{ secrets.FTP_PASSWORD }}
        local-dir: ./deploy/
        server-dir: /sites/qualiopi.ch/
        dangerous-clean-slate: false
        exclude: |
          **/.git*
          **/.git*/**
          **/node_modules/**
          README.md
        log-level: verbose
        timeout: 120000
        
    - name: Clean up
      run: |
        rm -rf deploy
        rm changed_files.txt

